package com.app.cq.service;

import com.alibaba.fastjson.JSON;
import com.app.cq.en.CheckState;
import com.app.cq.en.DataInfo;
import com.app.cq.en.IsValid;
import com.app.cq.en.Type;
import com.app.cq.model.*;
import com.app.cq.utils.BigDecimalUtils;
import com.app.cq.utils.GetCurrentUser;
import com.app.cq.utils.Precondition;
import com.google.common.collect.Lists;
import com.sqds.exception.SqdsException;
import com.sqds.hibernate.HibernateDao;
import com.sqds.page.PageInfo;
import com.sqds.utils.Collections3;
import com.sqds.web.ParamUtils;
import com.sqds.web.Servlets;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Created by lsh on 2018/5/7.
 * 家庭业务层
 */
@Service
public class FamilyService extends HibernateDao<Family>{

    @Autowired
    private FamilyPersonService familyPersonService;
    @Autowired
    private HistoryInfoService historyInfoService;
    @Autowired
    private FamilyHouseService familyHouseService;
    @Autowired
    private FamilyHousePersonService familyHousePersonService;
    @Autowired
    private OperationInfoService operationInfoService;

    /**
     * 得到有效、无效的家庭（管理员使用）
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getAllFamilyList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f order by f.isValid,f.bdCode,f.groupCode,f.familyCode");
    }

    /**
     * 得到有效、无效的家庭（管理员使用）
     * @return
     */
    public Family getFamilyByFamilyCode(String familyCode) {
        String hql = "from Family f where f.familyCode = ?";
        return findUnique(hql,familyCode);
    }


    /**
     * 得到有自建房的家庭信息
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getHouseStatusList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and f.houseStatus = ? order by f.bdCode,f.groupCode,f.familyCode", Type.YES.getIndex(), IsValid.YES.getIndex());
    }

    /**
     * 得到有效的家庭
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getFamilyList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? order by f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex());
    }

    /**
     * 得到选房家庭列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getXfList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and f.jfStatus = 2 order by f.xfNum,f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex());
    }

    /**
     * 得到补充协议列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getBcList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and f.jfStatus = 2 and f.xfStatus = 2 order by f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex());
    }

    /**
     * 得到数据终审列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getLastCheckList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and f.buChongDate is not null and f.buChongStatus = 2 order by f.buChongDate,f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex());
    }

    /**
     * 得到有效且初审通过的家庭
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getSignList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and firstCheckStatus = ? order by f.signNum,f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex(), CheckState.FIRSTCHECK.getIndex());
    }

    /**
     * 得到有效且有签约顺序号的家庭
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getSignXyList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and signNum is not null order by f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex());
    }
    /**
     * 得到有效且有签约顺序号的家庭
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getFileList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and signNum is not null and filePath is not null order by f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex());
    }
    /**
     * 得到交房列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getJfList(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.signStatus = 2 order by f.bdCode,f.groupCode,f.familyCode");
    }

    /**
     * 得到有效且有签约顺序号并按签约顺序号排序的家庭
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getBySignNum(PageInfo<Family> pageInfo) {
        return list(pageInfo, "from Family f where f.isValid = ? and signNum is not null order by f.signNum,f.bdCode,f.groupCode,f.familyCode", IsValid.YES.getIndex());
    }

    /**
     * 得到有效/无效的家庭
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getFamilyList(PageInfo<Family> pageInfo,Integer isValid) {
        return list(pageInfo, "from Family f where f.isValid = ? order by f.bdCode,f.groupCode,f.familyCode", isValid);
    }

    /**
     * 家庭编号查重
     * @param familyCode
     * @param familyId
     * @return
     */
    public Family checkRepeat(String familyCode, Integer familyId) {
        return findUnique("from Family where familyCode = ? and isValid = ? and id <> ?", familyCode, IsValid.YES.getIndex(),familyId);
    }

    /**
     * 交房保存
     */
    public synchronized void saveJf(HttpServletRequest request){
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.get(familyId);
        Integer jfMath = 1;//记录交房状态改变
        if (family.getJfStatus() == 2){
            jfMath = 2;
        }
//        HistoryInfo historyInfo = new HistoryInfo();
//        historyInfo.setType(DataInfo.ALERT.getName());   //修改数据
        Servlets.bind(request, family);
        if (family.getJfStatus() == 2 && jfMath == 1){//本次修改为交房状态
            OperationInfo operationInfo = new OperationInfo();
            operationInfo.setFamilyId(family.getId());
            operationInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());
            operationInfo.setOperateDate(new Date());
            operationInfo.setMemo("设置交房状态");
            operationInfoService.save(operationInfo);
        }
        if (family.getJfStatus() == 1 && jfMath == 2){//本次从已交房修改为未交房状态
            OperationInfo operationInfo = new OperationInfo();
            operationInfo.setFamilyId(family.getId());
            operationInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());
            operationInfo.setOperateDate(new Date());
            operationInfo.setMemo("撤销交房状态");
            operationInfoService.save(operationInfo);
            family.setJfDate(null);
            family.setJfMemo(null);
            family.setJfPerson(null);
        }
        this.save(family);
    }

    /**
     * 基础数据家庭信息保存
     * @param request
     * @return
     */
    public synchronized Integer familySave(HttpServletRequest request){
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.get(familyId);

        HistoryInfo historyInfo = new HistoryInfo();
        if (family == null) {
            family = new Family();
            historyInfo.setType(DataInfo.ADD.getName());   //新增数据
        }else {
            historyInfo.setType(DataInfo.ALERT.getName());   //修改数据
        }

        Servlets.bind(request, family);
        this.save(family);

        //保存家庭成员信息
        String[] personIdArray = ParamUtils.getStringParameters(request, "fp_id");   //id
        String[] personTypeArray = ParamUtils.getStringParameters(request, "fp_type");   //是否在本址
        String[] personHkNumArray = ParamUtils.getStringParameters(request, "fp_hkNum");   //户口本数
        String[] personNameArray = ParamUtils.getStringParameters(request, "fp_name");   //姓名
        String[] personIdCardArray = ParamUtils.getStringParameters(request, "fp_idCard");   //身份证号
        String[] personRelationArray = ParamUtils.getStringParameters(request, "fp_relation");   //（在本址：与户主关系；不在本址：与被拆迁人关系）
        String[] personHzRelationArray = ParamUtils.getStringParameters(request, "fp_hzRelation");   //户主与被拆迁人关系
        String[] personUnitArray = ParamUtils.getStringParameters(request, "fp_unit");   //工作单位
        String[] personHjAddressArray = ParamUtils.getStringParameters(request, "fp_hjAddress");   //户口所在地（不在本址）
        String[] personStatusArray = ParamUtils.getStringParameters(request, "fp_status");   //是否享受过保障性住房政策 1：是，2：否（录入界面默认为否）
        String[] personAveStatusArray = ParamUtils.getStringParameters(request, "fp_aveStatus");   //是否享受人均5平米 1：是，2：否（录入界面默认为是）
        String[] personFlagArray = ParamUtils.getStringParameters(request, "fp_flag");   //是否长期居住在未登记房屋中（在本址）
        String[] personAgeArray = ParamUtils.getStringParameters(request, "fp_age");   //年龄

        List<String[]> list = Lists.newArrayList();
        list.add(0, personIdArray);
        list.add(1, personTypeArray);
        list.add(2, personHkNumArray);
        list.add(3, personNameArray);
        list.add(4, personIdCardArray);
        list.add(5, personRelationArray);
        list.add(6, personHzRelationArray);
        list.add(7, personUnitArray);
        list.add(8, personHjAddressArray);
        list.add(9, personStatusArray);
        list.add(10, personAveStatusArray);
        list.add(11, personFlagArray);
        list.add(12, personAgeArray);
        this.familyPersonService.saveFamilyPerson(list,family.getId());

        //如果没有标准自建或者没有选择，将自建房信息删除
        if (family.getHouseStatus() == null || family.getHouseStatus() == 2){
            List<FamilyHouse> familyHouseList = Lists.newArrayList();
            familyHouseList = this.familyHouseService.getFamilyHouseListByFamilyId(family.getId());
            if (Collections3.isNotEmpty(familyHouseList)){
                for (FamilyHouse familyHouse : familyHouseList){
                    this.familyHousePersonService.deletePersonByFamilyHouseId(familyHouse.getId());
                    this.familyHouseService.delete(familyHouse.getId());
                }
            }
        }

        List<FamilyPerson> familyPersonList = this.familyPersonService.getPersonListByFamilyId(family.getId());
        // 保存家庭信息之前，先保存修改记录（保存的数据是修改之前的数据）
        historyInfo.setData(JSON.toJSONString(family));//家庭表信息
        historyInfo.setFamilyPersonData(JSON.toJSONString(familyPersonList));
        historyInfo.setOperateDate(new Date());
        historyInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());//操作人姓名
        historyInfo.setComputerId(GetCurrentUser.getIpAddr(request));//操作人IP地址
        historyInfo.setFamilyId(family.getId());//家庭表Id
        historyInfoService.save(historyInfo);

        return family.getId();
    }

    //就地安置房源情况
    public String getJdaz(Family family){
        Integer oneRoom = 0;//一居室套数
        Integer twoRoom = 0;//二居室套数
        Integer threeRoom = 0;//三居室套数
        Integer fourRoom = 0;//四居室套数
        BigDecimal familyBuildArea = family.getBuildArea();
        BigDecimal familyHjPersonNum = new BigDecimal(family.getHjPersonNum());
        BigDecimal divPerson = new BigDecimal(0);
        if (!(familyHjPersonNum.compareTo(new BigDecimal(0)) == 0)){
            divPerson = familyBuildArea.divide(familyHjPersonNum, 2);
        }
        if (divPerson.compareTo(new BigDecimal(5)) == -1){
            familyBuildArea = BigDecimalUtils.getBigAndBigMul(familyHjPersonNum,new BigDecimal(5));
        }

        //非成套
        if (family.getHouseStyle() == 2 || family.getHouseStyle() == 3){
            if (familyBuildArea.compareTo(new BigDecimal(20)) == -1){
                oneRoom += 1;
            }else if ((familyBuildArea.compareTo(new BigDecimal(20)) >= 0) && (familyBuildArea.compareTo(new BigDecimal(30)) == -1)){
                twoRoom += 1;
            }else if ((familyBuildArea.compareTo(new BigDecimal(30)) >= 0 ) && (familyBuildArea.compareTo(new BigDecimal(40)) == -1)){
                threeRoom += 1;
            }else if (familyBuildArea.compareTo(new BigDecimal(40)) >= 0){
                while (1==1){
                    threeRoom += 1;
                    familyBuildArea = BigDecimalUtils.getBigAndBigSub(familyBuildArea,new BigDecimal(40));
                    if (familyBuildArea.compareTo(new BigDecimal(10)) == -1){//不足10平米,货币补偿
                        break;
                    }else if ((familyBuildArea.compareTo(new BigDecimal(10)) >= 0) && (familyBuildArea.compareTo(new BigDecimal(20)) == -1)){
                        oneRoom += 1;
                        break;
                    }else if ((familyBuildArea.compareTo(new BigDecimal(20)) >= 0) && (familyBuildArea.compareTo(new BigDecimal(30)) == -1)){
                        twoRoom += 1;
                        break;
                    }else if ((familyBuildArea.compareTo(new BigDecimal(30)) >= 0 ) && (familyBuildArea.compareTo(new BigDecimal(40)) == -1)){
                        threeRoom += 1;
                        break;
                    }
                }
            }
        }else if (family.getHouseStyle() == 1){//成套
            if (familyBuildArea.compareTo(new BigDecimal(45)) == -1){
                oneRoom += 1;
            }else if (familyBuildArea.compareTo(new BigDecimal(45)) >= 0 && familyBuildArea.compareTo(new BigDecimal(60)) == -1){
                twoRoom += 1;
            }else if (familyBuildArea.compareTo(new BigDecimal(60)) >= 0 && familyBuildArea.compareTo(new BigDecimal(75)) == -1){
                threeRoom += 1;
            }else if (familyBuildArea.compareTo(new BigDecimal(75)) >= 0){
                fourRoom += 1;
            }
        }

        String azfy = "";
        if (oneRoom > 0){
            azfy += oneRoom + ",套一居室";
        }
        if (twoRoom > 0){
            azfy += "," + twoRoom + "套二居室";
        }
        if (threeRoom > 0){
            azfy += "," + threeRoom + "套三居室";
        }if (fourRoom > 0){
            azfy += "," + fourRoom + "套四居室";
        }
        if (azfy.startsWith(",")){
            azfy = azfy.substring(1,azfy.length());
        }
        return azfy;
    }

    //货币+异地补偿 异地安置房源情况
    public String getYdaz(Family family){
        String azfy = "";

        BigDecimal hbbcMoney = new BigDecimal(0);//不足10平米货币补偿
        BigDecimal familyBuildArea = family.getBuildArea();

        //非成套
        if (family.getHouseStyle() == 2 || family.getHouseStyle() == 3){
            if (familyBuildArea.compareTo(new BigDecimal(20)) == -1){
                azfy = ",二居室或一居室";
            }else if ((familyBuildArea.compareTo(new BigDecimal(20)) >= 0) && (familyBuildArea.compareTo(new BigDecimal(30)) == -1)){
                azfy = "三居室或二居室或一居室";
            }else if ((familyBuildArea.compareTo(new BigDecimal(30)) >= 0 ) && (familyBuildArea.compareTo(new BigDecimal(40)) == -1)){
                azfy = ",三居室+一居室或二居室+二居室";
            }else if (familyBuildArea.compareTo(new BigDecimal(40)) >= 0 && familyBuildArea.compareTo(new BigDecimal(50)) == -1){
                azfy = ",三居室+二居室";
            }else if (familyBuildArea.compareTo(new BigDecimal(50)) >= 0){
                azfy = ",三居室+三居室";
            }
        }else if (family.getHouseStyle() == 1){//成套
            if (familyBuildArea.compareTo(new BigDecimal(45)) == -1){
                azfy = ",二居室或一居室";
            }else if (familyBuildArea.compareTo(new BigDecimal(45)) >= 0 && familyBuildArea.compareTo(new BigDecimal(60)) == -1){
                azfy = ",三居室或二居室或一居室";
            }else if (familyBuildArea.compareTo(new BigDecimal(60)) >= 0 && familyBuildArea.compareTo(new BigDecimal(75)) == -1){
                azfy = ",三居室+一居室或二居室+二居室";
            }else if (familyBuildArea.compareTo(new BigDecimal(75)) >= 0 && familyBuildArea.compareTo(new BigDecimal(80)) == -1){
                azfy = ",三居室+二居室";
            }else if (familyBuildArea.compareTo(new BigDecimal(80)) >= 0){
                azfy = ",三居室+三居室";
            }
        }

        return azfy;
    }

    /**
     * 获取最大意向签约顺序号
     */
    public BigInteger getMaxSignNum(){
        String hql = "select IFNULL(MAX(signNum),0) from Family";
        Object o = this.getSession().createSQLQuery(hql).uniqueResult();
        BigInteger a = (BigInteger) o;
        return a;
    }

    /**********************************************************************************
     * 得到意向签约顺序号
     */
    public synchronized Integer getSignNum(Integer familyId,Date xyDate) {
        Family family = this.get(familyId);
        if (family.getSignStatus() == 1) {
            Integer maxSignNum = this.getMaxSignNum().intValue();
            maxSignNum ++;
            family.setSignNum(maxSignNum);
            family.setXfNum(maxSignNum);
            family.setSignYxDate(xyDate);
            family.setSignYxDateLong(System.currentTimeMillis());
        }
        this.save(family);
        return family.getSignNum();
    }
    /**********************************************************************************
     * 设置签约状态
     */
    public synchronized void setSign(Integer familyId) {
        Family family = this.get(familyId);
        if (family.getSignStatus() == 1) {
            family.setSignStatus(2);
            family.setSignDate(new Date());
            family.setSignDateLong(System.currentTimeMillis());
        }
        this.save(family);
    }

    /**
     * 获取最大选房顺序号
     */
    public BigInteger getMaxXfNum(){
        String hql = "select IFNULL(MAX(xfNum),0) from Family";
        Object o = this.getSession().createSQLQuery(hql).uniqueResult();
        BigInteger a = (BigInteger) o;
        return a;
    }

    /**********************************************************************************
     * 得到预约选房时间
     */
    public synchronized void getXfNum(Integer familyId,Date waitXf) {
        Family family = this.get(familyId);
        if (family.getXfStatus() == 1) {
            family.setWaitXfDate(waitXf);
        }else {
            throw new SqdsException("该家庭已选房");
        }
        this.save(family);
    }

    /**
     * 保存补偿方式
     *
     * @param request
     */
    public synchronized void saveBcType(HttpServletRequest request) {
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.get(familyId);
        Precondition.checkAjaxArguement(family != null && family.getId() != null, "6666", "异常操作，已被终止");
        Servlets.bind(request, family);
        this.save(family);//保存补偿方式
    }

    /**
     * 查询身份证号或姓名 like param 的家庭
     * @param param
     * @return
     */
    public List<Family> listByParam(String param) {
        StringBuffer hql = new StringBuffer("from Family fy where fy.isValid = 1 and fy.jfStatus = 2 ");
        List<Object> data = new ArrayList<Object>();
        if (param == null || param.equals("")) {
            return this.list(hql.toString());
        }
        hql.append("and ( fy.familyCode like ? ");
        data.add("%" + param + "%");
        hql.append("or fy.name like ? )");
        data.add("%" + param + "%");
        List<Family> list = this.list(hql.toString(), data.toArray());
        return list;
    }


    /**
     * 已选房源列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getChooseHouseList(PageInfo<Family> pageInfo) {
        pageInfo.setAutoCount(false);//关闭分页条数统计
        String hql = "from Family f inner join fetch f.houseList h inner join fetch h.project p where f.xfDate is not null order by h.chooseDate desc,f.familyCode";
        pageInfo = this.list(pageInfo,hql);
        pageInfo.setTotalCount(this.findLong(pageInfo,"select count(distinct f.id) from Family f where f.xfDate is not null").intValue());
        return pageInfo;
    }

    /**
     * 获取当前家庭补偿总计
     */
    public BigDecimal getBcMoney(Family family){
        BigDecimal bqMoney = family.getBqMoney() == null ? new BigDecimal(0) : family.getBqMoney();
        BigDecimal ktFee = family.getKtFee() == null ? new BigDecimal(0) : family.getKtFee();
        BigDecimal rsqFee = family.getRsqFee() == null ? new BigDecimal(0) : family.getRsqFee();
        BigDecimal tvFee = family.getTvFee() == null ? new BigDecimal(0) : family.getTvFee();
        BigDecimal kdFee = family.getKdFee() == null ? new BigDecimal(0) : family.getKdFee();
        BigDecimal dhFee = family.getDhFee() == null ? new BigDecimal(0) : family.getDhFee();
        BigDecimal dnqFee = family.getDnqFee() == null ? new BigDecimal(0) : family.getDnqFee();
        BigDecimal tctyFee = family.getTctyFee() == null ? new BigDecimal(0) : family.getTctyFee();
        BigDecimal zjfTctyFee = family.getZjfTctyFee() == null ? new BigDecimal(0) : family.getZjfTctyFee();

        BigDecimal sum = BigDecimalUtils.getSum(bqMoney, ktFee, rsqFee, tvFee, kdFee, dhFee, dnqFee, tctyFee, zjfTctyFee);
        return sum;
    }

    /**
     * 获取当前家庭补助总计
     */
    public BigDecimal getBzMoney(Family family){
        BigDecimal zhknMoney = family.getZhknMoney() == null ? new BigDecimal(0) : family.getZhknMoney();
        BigDecimal sfpfFee = family.getSfpfFee() == null ? new BigDecimal(0) : family.getSfpfFee();
        BigDecimal dbFee = family.getDbFee() == null ? new BigDecimal(0) : family.getDbFee();
        BigDecimal cjFee = family.getCjFee() == null ? new BigDecimal(0) : family.getCjFee();
        BigDecimal hbbcMoney = family.getHbbcMoney() == null ? new BigDecimal(0) : family.getHbbcMoney();
        BigDecimal ydjlfyMoney = family.getYdjlfyMoney() == null ? new BigDecimal(0) : family.getYdjlfyMoney();

        BigDecimal sum = BigDecimalUtils.getSum(zhknMoney, sfpfFee, dbFee, cjFee);//就地安置
        if (family.getBcType() == 2){//货币安置
            sum = BigDecimalUtils.getSum(sum,hbbcMoney,ydjlfyMoney);
        }else if (family.getBcType() == 3){//货币+异地安置
            sum = BigDecimalUtils.getSum(sum,hbbcMoney);
        }

        return sum;
    }

    /**
     * 获取当前家庭奖励总计
     */
    public BigDecimal getJlMoney(Family family){
        BigDecimal qysdFee = family.getQysdFee() == null ? new BigDecimal(0) : family.getQysdFee();
        BigDecimal gcphMoney = family.getGcphMoney() == null ? new BigDecimal(0) : family.getGcphMoney();

        BigDecimal sum = BigDecimalUtils.getSum(qysdFee, gcphMoney);
        return sum;
    }

}
