package com.app.cq.web.cq.family;

import com.alibaba.fastjson.JSON;
import com.app.common.model.DataDict;
import com.app.common.service.DataDictService;
import com.app.cq.en.CheckState;
import com.app.cq.en.DataInfo;
import com.app.cq.en.IsValid;
import com.app.cq.en.Type;
import com.app.cq.model.*;
import com.app.cq.service.*;
import com.app.cq.utils.*;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sqds.exception.SqdsException;
import com.sqds.page.PageInfo;
import com.sqds.utils.Collections3;
import com.sqds.utils.pdf.PdfDocumentGenerator;
import com.sqds.web.ParamUtils;
import com.sqds.web.Servlets;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Created by ZYK on 2018/5/7.
 */
@Controller
@RequestMapping("/cq/family/rh/*")
public class FamilyController {

    @Autowired
    private FamilyService familyService;
    @Autowired
    private FamilyPersonService familyPersonService;
    @Autowired
    private HistoryInfoService historyInfoService;
    @Autowired
    private FamilyHouseService familyHouseService;
    @Autowired
    private FamilyHousePersonService familyHousePersonService;
    @Autowired
    private DataDictService dataDictService;
    @Autowired
    private OperationInfoService operationInfoService;
    @Value("#{configProperties['url']}")
    private String url;

    /**
     * 公共列表
     * @param request
     * @param modelMap
     */
    private void commonList(HttpServletRequest request, ModelMap modelMap){
        PageInfo<Family> pageInfo = new PageInfo<>();
        Servlets.initPageInfo(request,pageInfo);
        pageInfo = this.familyService.getFamilyList(pageInfo);
        modelMap.addAttribute("pageInfo",pageInfo);
    }

    /**
     * 入户家庭列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("list")
    public void list(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 入户家庭查看列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("viewList")
    public void viewList(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 家庭信息登记
     * @param request
     * @param modelMap
     */
    @RequestMapping("form")
    public void form(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyPerson> familyPersonList1 = Lists.newArrayList();
        List<FamilyPerson> familyPersonList2 = Lists.newArrayList();
        if (family == null){
            family = new Family();
        }else {
            familyPersonList1 = this.familyPersonService.getPersonListByFamilyId(family.getId(), Type.YES.getIndex());
            familyPersonList2 = this.familyPersonService.getPersonListByFamilyId(family.getId(), Type.NO.getIndex());
        }
            //修改编号一次性方法
//        Integer b = 1;
//        Integer h = 1;
//        Integer l = 1;
//        String bs = "";
//        String hs = "";
//        String ls = "";
//
//        List<Family> families = this.familyService.listAll();
//        for (int i = 0; i <families.size() ; i++) {
//            Family family1 = families.get(i);
//
//            if (l == 100){
//                h++;
//                l = 1;
//            }
//            if (h == 100){
//                b++;
//                h = 1;
//            }
//
//            bs = "" + b;
//            hs = "" + h;
//            ls = "" + l;
//
//            if (b<10){
//                bs = "0" + b;
//            }
//            if (h<10){
//                hs = "0" + h;
//            }
//            if (l<10){
//                ls = "0" + l;
//            }
//
//            String familyCode = "BH-" + bs + "-" + hs + "-" + ls;
//            family1.setFamilyCode(familyCode);
//            familyService.save(family1);
//            l++;
//        }

        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyPersonList1",familyPersonList1);
        modelMap.addAttribute("familyPersonList2",familyPersonList2);
    }

    /**
     * 家庭编号查重
     * @param request
     * @return
     */
    @RequestMapping("checkRepeat")
    @ResponseBody
    public boolean checkRepeat(ServletRequest request) {
        String familyCode = ParamUtils.getString(request, "familyCode", "");
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.familyService.checkRepeat(familyCode, familyId);
        if (family != null) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 入户家庭信息保存
     * @param request
     * @return
     */
    @RequestMapping("familySave")
    public String familySave(HttpServletRequest request){
        Integer familyId = this.familyService.familySave(request);
        //计算方法
        return "redirect:list?" + request.getAttribute("searchParams");
    }

    /**
     * 删除家庭（假删）
     * @param request
     * @return
     */
    @RequestMapping("deleteFamily")
    @ResponseBody
    public synchronized Map<String,String> deleteFamily(HttpServletRequest request){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Map<String,String> map = Maps.newHashMap();
        Family family = this.familyService.get(familyId);
        if (family == null){
            map.put("success","false");
            map.put("message","数据错误，删除失败！");
            return map;
        }else {
            HistoryInfo historyInfo = new HistoryInfo();
            historyInfo.setType(DataInfo.DELETE.getName());   //删除数据
            List<FamilyPerson> familyPersonList = this.familyPersonService.getPersonListByFamilyId(family.getId());
            // 保存家庭信息之前，先保存修改记录（保存的数据是修改之前的数据）
            historyInfo.setFamilyId(family.getId());//家庭表Id
            historyInfo.setData(JSON.toJSONString(family));//家庭表信息
            historyInfo.setFamilyPersonData(JSON.toJSONString(familyPersonList));
            historyInfo.setOperateDate(new Date());
            historyInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());//操作人姓名
            historyInfo.setComputerId(GetCurrentUser.getIpAddr(request));//操作人IP地址
            this.historyInfoService.save(historyInfo);
        }

        family.setIsValid(IsValid.NO.getIndex());   //设置为无效
        this.familyService.save(family);
        map.put("success","true");
        map.put("message","删除成功！");
        return map;
    }

    @RequestMapping("dataSureList")
    public void dataSureList(HttpServletRequest request, ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.familyService.get(familyId);
        Precondition.checkSqdsArguement(family != null,"未找到数据");
        List<FamilyPerson> familyPersonList1 =   null;
        List<FamilyPerson> familyPersonList2 =null;
        List<FamilyHouse> familyHouseList = null;
        List<FamilyHousePerson> familyHousePersonList = null;
        Map<Integer,List<FamilyHousePerson>> familyHousePersonMap = null;
        //家庭成员列表
        familyPersonList1 = this.familyPersonService.getPersonListByFamilyId(family.getId(), Type.YES.getIndex());  //在本址
        familyPersonList2 = this.familyPersonService.getPersonListByFamilyId(family.getId(), Type.NO.getIndex());   //不在本址

        //如果该家庭存在标准自建房
        if (family.getHouseStatus() != null && family.getHouseStatus() == Type.YES.getIndex()){
            familyHouseList = this.familyHouseService.getFamilyHouseListByFamilyId(family.getId());   //标准自建房列表
            if (Collections3.isNotEmpty(familyHouseList)){
                for (FamilyHouse familyHouse : familyHouseList){
                    familyHousePersonList = this.familyHousePersonService.getFamilyHousePersonListByFamilyId(familyHouse.getId());
                    familyHousePersonMap.put(familyHouse.getId(),familyHousePersonList);
                }
            }
        }

        modelMap.addAttribute("family", family);
        modelMap.addAttribute("familyPersonList1", familyPersonList1);
        modelMap.addAttribute("familyPersonList2", familyPersonList2);
        modelMap.addAttribute("familyHouseList", familyHouseList);
        modelMap.addAttribute("familyHousePersonMap", familyHousePersonMap);
    }

    /**
     * 数据确认锁定
     */
    @RequestMapping("sureData")
    @ResponseBody
    public void sureData(HttpServletRequest request, ModelMap modelMap) {
        Integer familyId = ParamUtils.getInteger(request, "familyId", 0);
        Family family = this.familyService.get(familyId);
        Precondition.checkSqdsArguement(family != null, "数据错误，请重试！");
        family.setSureStatus(2);
        this.familyService.save(family);

        //保存动作记录
        OperationInfo operationInfo = new OperationInfo();
        operationInfo.setFamilyId(familyId);
        operationInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());
        operationInfo.setOperateDate(new Date());
        operationInfo.setMemo("家庭数据确认锁定");
    }
    /**
     * 撤销数据确认锁定
     */
    @RequestMapping("cancleData")
    @ResponseBody
    public void cancleData(HttpServletRequest request, ModelMap modelMap) {
        Integer familyId = ParamUtils.getInteger(request, "familyId", 0);
        Family family = this.familyService.get(familyId);
        Precondition.checkSqdsArguement(family != null, "数据错误，请重试！");
        family.setSureStatus(1);
        this.familyService.save(family);

        //保存动作记录
        OperationInfo operationInfo = new OperationInfo();
        operationInfo.setFamilyId(familyId);
        operationInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());
        operationInfo.setOperateDate(new Date());
        operationInfo.setMemo("家庭数据撤销锁定");
        operationInfoService.save(operationInfo);
    }

    /**
     * 标准自建房登记页面
     * @param request
     * @param modelMap
     */
    @RequestMapping("familyHouseForm")
    public void familyHouseForm(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Integer familyHouseId = ParamUtils.getInt(request,"familyHouseId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyHouse> familyHouseList = Lists.newArrayList();
        List<FamilyHousePerson> familyHousePersonList = Lists.newArrayList();
        familyHouseList = this.familyHouseService.getFamilyHouseListByFamilyId(family.getId());
        FamilyHouse familyHouse = this.familyHouseService.get(familyHouseId);
        //从列表进入
        if (familyHouse == null){
            //该家庭还没有登记过标准自建
            if (familyHouseList.size() == 0){
                familyHouse = new FamilyHouse();
            }else {     //该家庭登记过标准自建，初始为第一个
                familyHouse = familyHouseList.get(0);
                familyHousePersonList = this.familyHousePersonService.getFamilyHousePersonListByFamilyId(familyHouse.getId());
            }
        }else {
            familyHousePersonList = this.familyHousePersonService.getFamilyHousePersonListByFamilyId(familyHouse.getId());
        }
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyHouseList",familyHouseList);
        modelMap.addAttribute("familyHouse",familyHouse);
        modelMap.addAttribute("familyHousePersonList",familyHousePersonList);
    }

    /**
     * 标准自建房增加
     * @param request
     * @param modelMap
     */
    @RequestMapping("familyHouseAdd")
    public void familyHouseAdd(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyHouse> familyHouseList = Lists.newArrayList();
        familyHouseList = this.familyHouseService.getFamilyHouseListByFamilyId(family.getId());
        FamilyHouse familyHouse = new FamilyHouse();
        modelMap.addAttribute("familyHouse",familyHouse);
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyHouseList",familyHouseList);
    }

    /**
     * 标准自建房保存
     * @param request
     * @return
     */
    @RequestMapping("familyHouseSave")
    @ResponseBody
    public Map<String,String> familyHouseSave(HttpServletRequest request){
        Map<String,String> map = Maps.newHashMap();
        map = this.familyHouseService.familyHouseSave(request);
        return map;
    }

    /**
     * 标准自建房保存
     * @param request
     * @return
     */
    @RequestMapping("deleteFamilyHouse")
    @ResponseBody
    public Map<String,String> deleteFamilyHouse(HttpServletRequest request){
        Map<String,String> map = Maps.newHashMap();
        this.familyHouseService.deleteFamilyHouse(request);
        map.put("success","true");
        map.put("message","删除成功！");
        return map;
    }

    /**
     * 评估数据登记
     * @param request
     * @param modelMap
     */
    @RequestMapping("pgList")
    public void pgList(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 评估数据录入
     * @param request
     * @param modelMap
     */
    @RequestMapping("pgForm")
    public void pgForm(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        modelMap.addAttribute("family",family);
    }

    /**
     * 评估数据保存
     * @param request
     * @param modelMap
     * @return
     */
    @RequestMapping("pgSave")
    public synchronized String pgSave(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        Servlets.bind(request,family);
        //生成预分方案（算账）
        CalUtils.calc(family);
        this.familyService.save(family);
        return "redirect:pgList?" + request.getAttribute("searchParams");
    }

    /**
     * 打印参考单列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("printAccountList")
    public void printAccountList(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 参考单打印
     * @param request
     * @param modelMap
     */
    @RequestMapping("printAccount")
    public void printAccount(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        String type = ParamUtils.getString(request,"type","back");
        Family family = this.familyService.get(familyId);
        //计算方法
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("type",type);
    }

    /**
     * 参考单pdf
     * zyk
     * 2018-05-24
     * @param request
     */
    @RequestMapping("printAccountPDF")
    public void printAccountPDF(HttpServletRequest request,HttpServletResponse response){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        String type = ParamUtils.getString(request,"type","back");
        String view = ParamUtils.getString(request,"view","");
        Family family = this.familyService.get(familyId);
        if (family == null) {
            throw new SqdsException("数据错误！");
        }

        String template = "";
        if (view.equals("rh")){//入户窗口进入查看
            if (type.equals("back")){
                template = "printBackAccount.html";   //就地安置参考单模板
            }else if (type.equals("money")){
                template = "printMoneyAccount.html";     //货币补偿参考单模板
            }else if (type.equals("out")){
                template = "printOutAccount.html";       //就地安置+异地奖励房源参考单模板
            }
        }else {//终审窗口进入查看
            if (family.getBcType() == 1){
                template = "printBackAccount.html";   //就地安置参考单模板
            }else if (family.getBcType() == 2){
                template = "printMoneyAccount.html";     //货币补偿参考单模板
            }else if (family.getBcType() == 3){
                template = "printOutAccount.html";     //就地安置+异地奖励房源参考单模板
            }
        }


        Map map = Maps.newHashMap();
        String path = "";
        //如果审计初审未审核通过，加上查看中
        if (family.getFirstCheckStatus() != null && family.getFirstCheckStatus() == Type.YES.getIndex()){
            path = url;
        }

        List<DataDict> houseTypeList = dataDictService.getDataDictList("房屋产别");
        String fwcb = "";//房屋产别
        for (int i = 0; i <houseTypeList.size() ; i++) {
            if (houseTypeList.get(i).getAttributeValue().equals(family.getHouseType().toString())){
                fwcb = houseTypeList.get(i).getAttributeName();
            }
        }

        List<DataDict> houseStyleList = dataDictService.getDataDictList("房屋类型");
        String fwlx = "";//房屋类型
        for (int i = 0; i <houseStyleList.size() ; i++) {
            if (houseStyleList.get(i).getAttributeValue().equals(family.getHouseStyle().toString())){
                fwlx = houseStyleList.get(i).getAttributeName();
            }
        }

        CalUtils.calc(family);
        Map<String, String> bzMap = Maps.newHashMap();
        bzMap = dataDictService.getMapByParentAttributeNameForName("协议费用标准");

        BigDecimal qysd = new BigDecimal(250000);//签约速度奖（最大）
        BigDecimal gcphFee = new BigDecimal(bzMap.get("工程配合奖"));
        BigDecimal gcph = BigDecimalUtils.getBigAndBigMul(gcphFee,family.getBuildArea());//工程配合奖（最大）
//        BigDecimal xzqy = new BigDecimal(300000);//小组签约比例奖（最大）

        BigDecimal scjg = new BigDecimal(bzMap.get("标准房屋市场价格"));

        BigDecimal total1 = BigDecimalUtils.getSum(family.getBqMoney(),family.getKtFee(),family.getRsqFee(),family.getTvFee(),family.getKdFee(),family.getDhFee(),
                    family.getDnqFee(), family.getTctyFee(),family.getZhknMoney(), family.getSfpfFee(), family.getShknFee(), qysd, gcph);   //就地安置参考单合计

        String azfy = familyService.getJdaz(family);

        FreeMarkerMoneyUtils freeMarkerMoneyUtils = new FreeMarkerMoneyUtils();
        FreeMarkerBigDecimalUtils freeMarkerBigDecimalUtils = new FreeMarkerBigDecimalUtils();

        //货币补偿参考单 货币+异地补偿匡选单总计
        BigDecimal total2 = BigDecimalUtils.getSum(total1, family.getHouseMoney(), family.getHbbcMoney());

        String azfy1 = familyService.getYdaz(family);
        int personSize = familyPersonService.getPersonListByFamilyId(familyId).size();

        map.put("total1",total1);
        map.put("personSize",personSize);
        map.put("total2",total2);
        map.put("bigDecimalUtils",freeMarkerBigDecimalUtils);
        map.put("moneyUtils",freeMarkerMoneyUtils);
//        map.put("bcfs",bcfs);
//        map.put("wqMoney",wqMoney);
        map.put("azfy1",azfy1);
        map.put("azfy",azfy);
        map.put("scjg",scjg);
        map.put("qysd",qysd);
        map.put("gcph",gcph);
//        map.put("xzqy",xzqy);
        map.put("fwcb",fwcb);
        map.put("fwlx",fwlx);
        map.put("path",path);
        map.put("family",family);
        map.put("strings",new Strings());

        PdfDocumentGenerator pdfDocumentGenerator = new PdfDocumentGenerator();
        OutputStream outputStream = null;
        try {
            outputStream = response.getOutputStream();
            pdfDocumentGenerator.generate(template, map, outputStream);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                outputStream.flush();
                outputStream.close();
                response.reset();
            } catch (Exception e) {

            }
        }
    }

    /**
     * 评估报告列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("pgbgList")
    public void pgbgList(HttpServletRequest request, ModelMap modelMap){
        PageInfo<Family> pageInfo = new PageInfo<>();
        Servlets.initPageInfo(request,pageInfo);
        pageInfo = familyService.getFamilyList(pageInfo);
        modelMap.addAttribute("pageInfo",pageInfo);
    }
//
//    /**
//     * 家庭信息上传
//     * @param request
//     * @param map
//     * @return
//     * @throws IOException
//     */
//    @Transactional
//    @RequestMapping("comparison")
//    public String comparison(HttpServletRequest request , ModelMap map) throws Exception {
//        //上传文件
//        byte[] filePath = Servlets.uploadFile(request,"file");
//        InputStream excelInputStream = new ByteArrayInputStream(filePath);
//        List list = ReadExcel.read(excelInputStream,0,true);
//        List<Family> familyList=familyService.listAll();
//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//
//        for (int i = 0; i < list.size() ; i++) {
//            if (i > 0){
//                List row = (List) list.get(i);
//                if (!"".equals((String)row.get(0))) {
//                    Family family = new Family();
//                    String projectName = (String) row.get(1);
//                    String familyTypeName = (String)row.get(2);
//                    String familyCode = (String)row.get(3);
//                    String name = (String) row.get(4);
//                    String age = (String) row.get(5);
//                    String applyDate1 = (String) row.get(6);
//                    String cardType = (String) row.get(7);
//                    String idCard = (String) row.get(8);
//                    String contactName = (String) row.get(9);
//                    String phone = (String) row.get(10);
//                    String currentAddres = (String) row.get(11);
//                    String postCode = (String) row.get(12);
//                    String memo = (String) row.get(13);
//                    String marry = (String) row.get(14);
//                    Integer marryStatus = 0;
//                    if (!marry.equals("") && marry.equals("未婚")){
//                        marryStatus = 1;
//                    }
//                    if (!marry.equals("") && marry.equals("已婚")){
//                        marryStatus = 2;
//                    }
//                    if (!marry.equals("") && marry.equals("离异")){
//                        marryStatus = 3;
//                    }
//                    String work = (String) row.get(15);
//                    Integer workUnit = 0;
//                    if (!work.equals("") && work.equals("丰台区")){
//                        workUnit = 1;
//                    }
//                    if (!work.equals("") && work.equals("东城区")){
//                        workUnit = 2;
//                    }
//                    String isThisArea = (String) row.get(16);
//                    Integer thisArea = 0;
//                    if (!isThisArea.equals("") && isThisArea.equals("是")){
//                        thisArea = 1;
//                    }
//                    if (!isThisArea.equals("") && isThisArea.equals("否")){
//                        thisArea = 2;
//                    }
//                    String address = (String) row.get(17);
//                    String Permit1 = (String) row.get(18);
//                    Integer residencePermit = 0;
//                    if (!Permit1.equals("") && Permit1.equals("北京市工作居住证")){
//                        residencePermit = 1;
//                    }
//
//                    String handleType1 = (String) row.get(19);
//                    Integer handleType = 0;
//                    if (!handleType1.equals("") && handleType1.equals("身份证")){
//                        handleType = 1;
//                    }
//                    if (!handleType1.equals("") && handleType1.equals("军（警）身份证")){
//                        handleType = 2;
//                    }
//                    String handleCard = (String) row.get(20);
//                    String residencePermitCode = (String) row.get(21);
//                    String startDate1 = (String) row.get(22);
//                    String endDate1 = (String) row.get(23);
//                    String armyType1 = (String) row.get(24);
//                    Integer armyType = 0;
//                    if (!armyType1.equals("") && armyType1.equals("军官证")){
//                        armyType = 1;
//                    }
//                    if (!armyType1.equals("") && armyType1.equals("警官证")){
//                        armyType = 2;
//                    }
//                    String armyIdCard = (String) row.get(25);
//                    String registerCode = (String) row.get(26);
//                    String firstOrNot1 = (String) row.get(27);
//                    Integer firstOrNot = 0;
//                    if (!firstOrNot1.equals("") && firstOrNot1.equals("是")){
//                        firstOrNot = 1;
//                    }
//                    if (!firstOrNot1.equals("") && firstOrNot1.equals("否")){
//                        firstOrNot = 2;
//                    }
//                    String continuity1 = (String) row.get(28);
//                    Integer continuity = 0;
//                    if (!continuity1.equals("") && continuity1.equals("是")){
//                        continuity = 1;
//                    }
//                    if (!continuity1.equals("") && continuity1.equals("否")){
//                        continuity = 2;
//                    }
//                    String education = (String) row.get(29);
//                    String learningMethod = (String) row.get(30);
//                    String thisParkIs = (String) row.get(31);
//                    String educationCode = (String) row.get(32);
//                    String job = (String) row.get(33);
//                    String unit = (String) row.get(34);
//                    String unitPerson = (String) row.get(35);
//                    String unitPhone = (String) row.get(36);
//                    String shakingBatch = (String) row.get(37);
//                    String shakingCode = (String) row.get(38);
//                    String shakingGroup = (String) row.get(39);
//                    String shakingResult = (String) row.get(40);
//                    String exSpouseName = (String) row.get(41);
//                    String exCardTypeName = (String) row.get(42);
//                    Integer exCardType = 0;
//                    if (!exCardTypeName.equals("") && exCardTypeName.equals("军官证")){
//                        exCardType = 1;
//                    }
//                    if (!exCardTypeName.equals("") && exCardTypeName.equals("警官证")){
//                        exCardType = 2;
//                    }
//                    String exIdCard = (String) row.get(43);
//                    String divorceDate = (String) row.get(44);
//
//
//
//                    family.setProjectName(projectName);
//                    Integer familyType = null;
//                    List<DataDict> familyTypeList = this.dataDictService.getDataDictList("家庭类型");
//                    for (DataDict dataDict : familyTypeList) {
//                        if (dataDict.getAttributeName().equals(familyTypeName)){
//                            familyType = Integer.valueOf(dataDict.getAttributeValue());
//                        }
//                    }
//                    family.setFamilyCode(familyCode);
//                    if (familyType == null){
//                        throw new SqdsException("家庭类型不能为空");
//                    }else {
//                        family.setFamilyType(familyType);
//                    }
//
//                    for (Family family1:familyList) {
//                        if (family1.getFamilyCode().equals(familyCode)){
//                            throw new SqdsException("申请编号重复,请核验");
//                        }
//                    }
//
//
//                    family.setName(name);
//                    family.setAge(age.equals("") ? null :Integer.valueOf(age));
//                    if (!applyDate1.equals("") && applyDate1 != null) {
//                        if (applyDate1.contains("/")){
//                            applyDate1 = applyDate1.replace("/","-");
//                        }
//                        Date applyDate = sdf.parse(applyDate1);
//                        family.setApplyDate(applyDate);
//                    }
//                    if ("身份证".equals(cardType.trim())){
//                        family.setCardType(1);
//                    }
//                    if ("警官证".equals(cardType.trim())){
//                        family.setCardType(2);
//                    }
//                    family.setIdCard(idCard);
//                    family.setContactName(contactName);
//                    family.setPhone(phone);
//                    family.setCurrentAddres(currentAddres);
//                    family.setPostCode(postCode);
//                    family.setMemo(memo);
//                    family.setMarryStatus(marryStatus);
//                    family.setWorkUnit(workUnit);
//                    family.setThisArea(thisArea);
//                    family.setAddress(address);
//                    family.setResidencePermit(residencePermit);
//                    family.setHandleType(handleType);
//                    family.setHandleCard(handleCard);
//                    family.setResidencePermitCode(residencePermitCode);
//                    if (!startDate1.equals("") && startDate1 != null) {
//                        if (startDate1.contains("/")) {
//                            startDate1 = startDate1.replace("/", "-");
//                        }
//                        Date startDate = sdf.parse(startDate1);
//                        family.setStartDate(startDate);
//                    }
//                    if (!endDate1.equals("") && endDate1 != null) {
//                        if (endDate1.contains("/")){
//                            endDate1 = endDate1.replace("/","-");
//                        }
//                        Date endDate = sdf.parse(endDate1);
//                        family.setEndDate(endDate);
//                    }
//                    family.setArmyType(armyType);
//                    family.setArmyIdCard(armyIdCard);
//                    family.setRegisterCode(registerCode);
//                    family.setFirstOrNot(firstOrNot);
//                    family.setContinuity(continuity);
//                    List<DataDict> dataList = dataDictService.getDataDictList("学历层次");
//                    Integer educationLevel = 0;
//                    for (DataDict dataDict : dataList) {
//                        if (dataDict.getAttributeName().equals(education)){
//                            educationLevel = Integer.valueOf(dataDict.getAttributeValue());
//                        }
//                    }
//                    family.setEducation(educationLevel);
//                    family.setLearning(learningMethod);
//                    List<DataDict> thisParkList = dataDictService.getDataDictList("是否");
//                    Integer thisPark = 0;
//                    for (DataDict dataDict : thisParkList) {
//                        if (dataDict.getAttributeName().equals(thisParkIs)){
//                            thisPark = Integer.valueOf(dataDict.getAttributeValue());
//                        }
//                    }
//                    family.setThisPark(thisPark);
//                    family.setEducationCode(educationCode);
//                    family.setJob(job);
//                    family.setUnit(unit);
//                    family.setUnitPerson(unitPerson);
//                    family.setUnitPhone(unitPhone);
//                    family.setShakingBatch(shakingBatch);
//                    family.setShakingCode(shakingCode);
//                    family.setShakingGroup(shakingGroup);
//                    family.setShakingResult(shakingResult);
//                    family.setExSpouseName(exSpouseName);
//                    family.setExCardType(exCardType);
//                    family.setExIdCard(exIdCard);
//                    if (!divorceDate.equals("") && divorceDate != null) {
//                        if (divorceDate.contains("/")){
//                            divorceDate = divorceDate.replace("/","-");
//                        }
//                        Date divorceDates = sdf.parse(divorceDate);
//                        family.setDivorceDate(divorceDates);
//                    }
//                    this.familyService.save(family);
//                }
//            }
//        }
//        return "redirect:/cq/compareInfo/innerExcelIndex";
//    }
}
