package com.app.cq.web.cq.family;

import com.alibaba.fastjson.JSON;
import com.app.common.model.DataDict;
import com.app.common.service.DataDictService;
import com.app.cq.en.CheckState;
import com.app.cq.en.DataInfo;
import com.app.cq.en.IsValid;
import com.app.cq.en.Type;
import com.app.cq.model.*;
import com.app.cq.service.*;
import com.app.cq.utils.*;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sqds.exception.SqdsException;
import com.sqds.page.PageInfo;
import com.sqds.utils.pdf.PdfDocumentGenerator;
import com.sqds.web.ParamUtils;
import com.sqds.web.Servlets;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Created by ZYK on 2018/5/7.
 */
@Controller
@RequestMapping("/cq/family/rh/*")
public class FamilyController {

    @Autowired
    private FamilyService familyService;
    @Autowired
    private FamilyPersonService familyPersonService;
    @Autowired
    private HistoryInfoService historyInfoService;
    @Autowired
    private FamilyHouseService familyHouseService;
    @Autowired
    private FamilyHousePersonService familyHousePersonService;
    @Autowired
    private DataDictService dataDictService;
    @Autowired
    private OperationInfoService operationInfoService;
    @Value("#{configProperties['url']}")
    private String url;

    /**
     * 公共列表
     * @param request
     * @param modelMap
     */
    private void commonList(HttpServletRequest request, ModelMap modelMap){
        PageInfo<Family> pageInfo = new PageInfo<>();
        Servlets.initPageInfo(request,pageInfo);
        pageInfo = this.familyService.getFamilyList(pageInfo);
        modelMap.addAttribute("pageInfo",pageInfo);
    }

    /**
     * 入户家庭列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("list")
    public void list(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 入户家庭查看列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("viewList")
    public void viewList(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 家庭信息登记
     * @param request
     * @param modelMap
     */
    @RequestMapping("form")
    public void form(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyPerson> familyPersonList1 = Lists.newArrayList();
        List<FamilyPerson> familyPersonList2 = Lists.newArrayList();
        if (family == null){
            family = new Family();
        }else {
            familyPersonList1 = this.familyPersonService.getPersonListByFamilyId(family.getId(), Type.YES.getIndex());
            familyPersonList2 = this.familyPersonService.getPersonListByFamilyId(family.getId(), Type.NO.getIndex());
        }
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyPersonList1",familyPersonList1);
        modelMap.addAttribute("familyPersonList2",familyPersonList2);
    }

    /**
     * 家庭编号查重
     * @param request
     * @return
     */
    @RequestMapping("checkRepeat")
    @ResponseBody
    public boolean checkRepeat(ServletRequest request) {
        String familyCode = ParamUtils.getString(request, "familyCode", "");
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.familyService.checkRepeat(familyCode, familyId);
        if (family != null) {
            return false;
        } else {
            return true;
        }
    }

//    /**
//     * 入户家庭信息保存
//     * @param request
//     * @return
//     */
//    @RequestMapping("familySave")
//    public String familySave(HttpServletRequest request){
//        Integer familyId = this.familyService.familySave(request);
//        //计算方法
//        return "redirect:list?" + request.getAttribute("searchParams");
//    }

    /**
     * 删除家庭（假删）
     * @param request
     * @return
     */
    @RequestMapping("deleteFamily")
    @ResponseBody
    public synchronized Map<String,String> deleteFamily(HttpServletRequest request){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Map<String,String> map = Maps.newHashMap();
        Family family = this.familyService.get(familyId);
        if (family == null){
            map.put("success","false");
            map.put("message","数据错误，删除失败！");
            return map;
        }else {
            HistoryInfo historyInfo = new HistoryInfo();
            historyInfo.setType(DataInfo.DELETE.getName());   //删除数据
            List<FamilyPerson> familyPersonList = this.familyPersonService.getPersonListByFamilyId(family.getId());
            // 保存家庭信息之前，先保存修改记录（保存的数据是修改之前的数据）
            historyInfo.setFamilyId(family.getId());//家庭表Id
            historyInfo.setData(JSON.toJSONString(family));//家庭表信息
            historyInfo.setFamilyPersonData(JSON.toJSONString(familyPersonList));
            historyInfo.setOperateDate(new Date());
            historyInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());//操作人姓名
            historyInfo.setComputerId(GetCurrentUser.getIpAddr(request));//操作人IP地址
            this.historyInfoService.save(historyInfo);
        }

        family.setIsValid(IsValid.NO.getIndex());   //设置为无效
        this.familyService.save(family);
        map.put("success","true");
        map.put("message","删除成功！");
        return map;
    }

    /**
     * 数据确认锁定
     */
    @RequestMapping("sureData")
    @ResponseBody
    public void sureData(HttpServletRequest request, ModelMap modelMap) {
        Integer familyId = ParamUtils.getInteger(request, "familyId", 0);
        Family family = this.familyService.get(familyId);
        Precondition.checkSqdsArguement(family != null, "数据错误，请重试！");
        family.setSureStatus(2);
        this.familyService.save(family);

        //保存动作记录
        OperationInfo operationInfo = new OperationInfo();
        operationInfo.setFamilyId(familyId);
        operationInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());
        operationInfo.setOperateDate(new Date());
        operationInfo.setMemo("家庭数据确认锁定");
    }
    /**
     * 撤销数据确认锁定
     */
    @RequestMapping("cancleData")
    @ResponseBody
    public void cancleData(HttpServletRequest request, ModelMap modelMap) {
        Integer familyId = ParamUtils.getInteger(request, "familyId", 0);
        Family family = this.familyService.get(familyId);
        Precondition.checkSqdsArguement(family != null, "数据错误，请重试！");
        family.setSureStatus(1);
        this.familyService.save(family);

        //保存动作记录
        OperationInfo operationInfo = new OperationInfo();
        operationInfo.setFamilyId(familyId);
        operationInfo.setOperatePerson(GetCurrentUser.getLoginUser(request).getUsername());
        operationInfo.setOperateDate(new Date());
        operationInfo.setMemo("家庭数据撤销锁定");
        operationInfoService.save(operationInfo);
    }

    /**
     * 标准自建房登记页面
     * @param request
     * @param modelMap
     */
    @RequestMapping("familyHouseForm")
    public void familyHouseForm(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Integer familyHouseId = ParamUtils.getInt(request,"familyHouseId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyHouse> familyHouseList = Lists.newArrayList();
        List<FamilyHousePerson> familyHousePersonList = Lists.newArrayList();
        familyHouseList = this.familyHouseService.getFamilyHouseListByFamilyId(family.getId());
        FamilyHouse familyHouse = this.familyHouseService.get(familyHouseId);
        //从列表进入
        if (familyHouse == null){
            //该家庭还没有登记过标准自建
            if (familyHouseList.size() == 0){
                familyHouse = new FamilyHouse();
            }else {     //该家庭登记过标准自建，初始为第一个
                familyHouse = familyHouseList.get(0);
                familyHousePersonList = this.familyHousePersonService.getFamilyHousePersonListByFamilyId(familyHouse.getId());
            }
        }else {
            familyHousePersonList = this.familyHousePersonService.getFamilyHousePersonListByFamilyId(familyHouse.getId());
        }
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyHouseList",familyHouseList);
        modelMap.addAttribute("familyHouse",familyHouse);
        modelMap.addAttribute("familyHousePersonList",familyHousePersonList);
    }

    /**
     * 标准自建房增加
     * @param request
     * @param modelMap
     */
    @RequestMapping("familyHouseAdd")
    public void familyHouseAdd(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyHouse> familyHouseList = Lists.newArrayList();
        familyHouseList = this.familyHouseService.getFamilyHouseListByFamilyId(family.getId());
        FamilyHouse familyHouse = new FamilyHouse();
        modelMap.addAttribute("familyHouse",familyHouse);
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyHouseList",familyHouseList);
    }

    /**
     * 标准自建房保存
     * @param request
     * @return
     */
    @RequestMapping("familyHouseSave")
    @ResponseBody
    public Map<String,String> familyHouseSave(HttpServletRequest request){
        Map<String,String> map = Maps.newHashMap();
        map = this.familyHouseService.familyHouseSave(request);
        return map;
    }

    /**
     * 标准自建房保存
     * @param request
     * @return
     */
    @RequestMapping("deleteFamilyHouse")
    @ResponseBody
    public Map<String,String> deleteFamilyHouse(HttpServletRequest request){
        Map<String,String> map = Maps.newHashMap();
        this.familyHouseService.deleteFamilyHouse(request);
        map.put("success","true");
        map.put("message","删除成功！");
        return map;
    }

    /**
     * 评估数据登记
     * @param request
     * @param modelMap
     */
    @RequestMapping("pgList")
    public void pgList(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 评估数据录入
     * @param request
     * @param modelMap
     */
    @RequestMapping("pgForm")
    public void pgForm(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        modelMap.addAttribute("family",family);
    }

    /**
     * 评估数据保存
     * @param request
     * @param modelMap
     * @return
     */
    @RequestMapping("pgSave")
    public synchronized String pgSave(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        Servlets.bind(request,family);
        this.familyService.save(family);
        return "redirect:pgList?" + request.getAttribute("searchParams");
    }

    /**
     * 打印匡算单列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("printAccountList")
    public void printAccountList(HttpServletRequest request,ModelMap modelMap){
        this.commonList(request,modelMap);
    }

    /**
     * 匡算单打印
     * @param request
     * @param modelMap
     */
    @RequestMapping("printAccount")
    public void printAccount(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        String type = ParamUtils.getString(request,"type","back");
        Family family = this.familyService.get(familyId);
        //计算方法
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("type",type);
    }

    /**
     * 匡算单pdf
     * zyk
     * 2018-05-24
     * @param request
     */
    @RequestMapping("printAccountPDF")
    public void printAccountPDF(HttpServletRequest request,HttpServletResponse response){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        String type = ParamUtils.getString(request,"type","back");
        Family family = this.familyService.get(familyId);
        if (family == null) {
            throw new SqdsException("数据错误！");
        }
        String template = "printBackAccount.html";   //就地安置匡算单模板
        if (type.equals("money")){
            template = "printMoneyAccount.html";     //货币补偿匡算单模板
        }else if (type.equals("out")){
            template = "printOutAccount.html";       //就地安置+异地奖励房源匡算单模板
        }

        Map map = Maps.newHashMap();
        String path = "";
        //如果审计初审未审核通过，加上查看中
        if (family.getFirstCheckStatus() != null && family.getFirstCheckStatus() == Type.YES.getIndex()){
            path = url;
        }

        List<DataDict> houseTypeList = dataDictService.getDataDictList("房屋产别");
        String fwcb = "";//房屋产别
        for (int i = 0; i <houseTypeList.size() ; i++) {
            if (houseTypeList.get(i).getAttributeValue().equals(family.getHouseType().toString())){
                fwcb = houseTypeList.get(i).getAttributeName();
            }
        }

        List<DataDict> houseStyleList = dataDictService.getDataDictList("房屋类型");
        String fwlx = "";//房屋类型
        for (int i = 0; i <houseStyleList.size() ; i++) {
            if (houseStyleList.get(i).getAttributeValue().equals(family.getHouseStyle().toString())){
                fwlx = houseStyleList.get(i).getAttributeName();
            }
        }

        CalUtils.calc(family);
        Map<String, String> bzMap = Maps.newHashMap();
        bzMap = dataDictService.getMapByParentAttributeNameForName("协议费用标准");

        BigDecimal shkn = BigDecimalUtils.getSum(family.getCjFee(), family.getDbFee());//生活困难补助费
        BigDecimal qysd = new BigDecimal(250000);//签约速度奖（最大）
        BigDecimal gcphFee = new BigDecimal(bzMap.get("工程配合奖"));
        BigDecimal gcph = BigDecimalUtils.getBigAndBigMul(gcphFee,family.getBuildArea());//工程配合奖（最大）
        BigDecimal xzqy = new BigDecimal(300000);//小组签约比例奖（最大）

        BigDecimal scjg = new BigDecimal(bzMap.get("标准房屋市场价格"));

        BigDecimal total1 = BigDecimalUtils.getSum(family.getBqMoney(), family.getYjMoney(), family.getTctyFee(), family.getSfpfFee(), family.getShknFee(), qysd, gcph, xzqy);

        String azfy = familyService.getJdaz(family);

        FreeMarkerMoneyUtils freeMarkerMoneyUtils = new FreeMarkerMoneyUtils();
        FreeMarkerBigDecimalUtils freeMarkerBigDecimalUtils = new FreeMarkerBigDecimalUtils();

        //货币补偿匡算单
        BigDecimal hbbc = new BigDecimal(0);//货币综合补偿
        if (family.getHouseStyle() == 1){
            hbbc = BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigSub(scjg,family.getHouseNewMoney()),family.getBuildArea()),new BigDecimal(0.35));
        }else {
            hbbc = BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigSub(scjg,family.getHouseNewMoney()),family.getBuildArea()),new BigDecimal(0.5));
        }

        BigDecimal wqMoney = new BigDecimal(0);//外迁奖励
        BigDecimal buildArea = family.getBuildArea();
        if (buildArea.compareTo(new BigDecimal(20)) == -1){
            buildArea = new BigDecimal(20);
        }
        wqMoney = BigDecimalUtils.getBigAndIntMul(buildArea,5000);

        BigDecimal total2 = BigDecimalUtils.getSum(total1, family.getHouseMoney(), hbbc, wqMoney);

        //货币+异地补偿匡选单
        BigDecimal hbbc1 = new BigDecimal(0);//货币综合补偿
        if (family.getHouseStyle() == 1){
            hbbc1 = BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigSub(scjg,family.getHouseNewMoney()),family.getBuildArea()),new BigDecimal(0.15));
        }else {
            hbbc1 = BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigMul(BigDecimalUtils.getBigAndBigSub(scjg,family.getHouseNewMoney()),family.getBuildArea()),new BigDecimal(0.3));
        }

        String azfy1 = familyService.getYdaz(family);

        map.put("total1",total1);
        map.put("total2",total2);
        map.put("bigDecimalUtils",freeMarkerBigDecimalUtils);
        map.put("moneyUtils",freeMarkerMoneyUtils);
//        map.put("bcfs",bcfs);
        map.put("wqMoney",wqMoney);
        map.put("hbbc1",hbbc1);
        map.put("hbbc",hbbc);
        map.put("azfy1",azfy1);
        map.put("azfy",azfy);
        map.put("scjg",scjg);
        map.put("qysd",qysd);
        map.put("gcph",gcph);
        map.put("xzqy",xzqy);
        map.put("shkn",shkn);
        map.put("fwcb",fwcb);
        map.put("fwlx",fwlx);
        map.put("path",path);
        map.put("family",family);
        map.put("strings",new Strings());

        PdfDocumentGenerator pdfDocumentGenerator = new PdfDocumentGenerator();
        OutputStream outputStream = null;
        try {
            outputStream = response.getOutputStream();
            pdfDocumentGenerator.generate(template, map, outputStream);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                outputStream.flush();
                outputStream.close();
                response.reset();
            } catch (Exception e) {

            }
        }
    }
}
