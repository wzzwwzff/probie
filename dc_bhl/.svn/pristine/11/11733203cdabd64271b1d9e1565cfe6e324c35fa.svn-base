package com.app.cq.service;

import com.app.common.service.DataDictService;
import com.app.cq.model.House;
import com.app.cq.utils.BigDecimalUtils;
import com.app.cq.utils.CalculateDate;
import com.app.cq.utils.CommonParams;
import com.app.cq.utils.GetCurrentUser;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sqds.hibernate.HibernateDao;
import com.sqds.page.PageInfo;
import com.sqds.utils.Collections3;
import com.sqds.utils.DateUtils;
import com.sqds.web.ParamUtils;
import org.hibernate.Query;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 房源业务层
 * Created by ZYK on 2018/3/12.
 */
@Service
public class HouseService extends HibernateDao<House> {

    @Autowired
    private DataDictService dataDictService;

    /**
     * 通过houseId联合查询house、project
     *
     * @param houseId
     * @return
     */
    public House getHouse(Integer houseId) {
        return this.findUnique(" from House h inner join fetch h.project p where h.id = ? ", houseId);
    }

    /**
     * 根据项目id得到某一项目所有房源
     *
     * @param pageInfo
     * @return
     */
    public PageInfo<House> getHouseListByProjectId(PageInfo<House> pageInfo,Integer projectId) {
        String hql = "from House h inner join fetch h.project p where p.id = ? order by h.buildNum,h.unitNum,h.houseNum";
        return this.list(pageInfo,hql,projectId);
    }

    /**
     * 获取特定项目的所有楼号
     *
     * @return
     */
    public Map<Integer, List<String>> getHouseBuildNum(List<Integer> projectIdList) {
        Map<Integer, List<String>> map = Maps.newLinkedHashMap();
        String sql = "select projectId,buildNum from House where projectId in (:projectIdList) group by projectId,buildNum order by projectId,buildNum";
        List<Map> list = this.getSession().createSQLQuery(sql).setParameterList("projectIdList",projectIdList).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        if (Collections3.isNotEmpty(list)) {
            List<String> strList = null;
            for (Map m : list) {
                Integer projectId = Integer.valueOf(m.get("projectId").toString());
                String buildNum = m.get("buildNum").toString();
                strList = map.get(projectId);
                strList = Collections3.isNotEmpty(strList) ? strList : Lists.<String>newLinkedList();
                strList.add(buildNum);
                map.put(projectId, strList);
            }
        }
        return map;
    }

    /**
     * 取得单元
     *
     * @param projectId
     * @param buildNum
     * @return
     */
    public List<String> distinctUnit(Integer projectId, String buildNum) {
        String hql = "select distinct h.unitNum from House h where h.project.id=:projectId and h.buildNum=:buildNum order by h.unitNum desc";
        return this.getSession().createQuery(hql).setInteger("projectId", projectId).setString("buildNum", buildNum).list();
    }

    /**
     * 取得单元最大的房号
     *
     * @param projectId
     * @param buildNum
     * @return
     */
    public Map<String, String> getMaxRoomByUnit(Integer projectId, String buildNum) {
        String hql = "select h.unitNum as unitNum, max(substring(h.houseNum,3,2)) as maxRoom from House h where h.project.id = ? and h.buildNum = ? group by h.unitNum";
        Query query = this.getSession().createQuery(hql);
        query.setInteger(0, projectId);
        query.setString(1, buildNum);
        query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);
        List<Map> list = query.list();
        Map<String, String> resultMap = Maps.newHashMap();
        if (Collections3.isNotEmpty(list)) {
            for (Map map : list) {
                String unitNum = map.get("unitNum").toString();
                String maxRoom = map.get("maxRoom").toString();
                resultMap.put(unitNum, maxRoom);
            }
        }
        return resultMap;
    }

    /**
     * 获取最大房间号(楼层)
     *
     * @param projectId
     * @param buildingNum
     * @return
     */
    public int getMaxFloor(Integer projectId, String buildingNum) {
        String sql = "select max(substring(h.houseNum,0,3)) from House h where h.projectId = ? and h.buildNum = ?";
        List list = this.getSession().createSQLQuery(sql).setInteger(0, projectId).setString(1, buildingNum).list();
        int maxFh = 0;
        if (Collections3.isNotEmpty(list) && list.size() > 0) {
            Object o = list.get(0);
            if (o != null) {
                maxFh = Integer.valueOf(String.valueOf(o));
            }
        }
        return maxFh;
    }

    /**
     * 根据项目、楼号查询该楼下的所有房源数据
     *
     * @param projectId
     * @param buildNum
     * @return
     */
    public List<House> listHouse(Integer projectId, String buildNum) {
        return list("from House h inner join fetch h.project p where p.id = ? and h.buildNum = ? order by h.buildNum,h.unitNum,h.houseNum", projectId, buildNum);
    }

    /**
     * 单元、房号、居室
     *
     * @param projectId
     * @param buildNum
     * @return
     */
    public Map<String, Map<String, String>> getHouseTypeByProjectIdAndBuildNum(Integer projectId, String buildNum) {
        String sql = "select distinct unitNum,SUBSTRING(houseNum,3,2) as num,houseType from House where projectId =:projectId and buildNum = :buildNum group by buildNum,unitNum,houseNum,houseType ";
        Query query = this.getSession().createSQLQuery(sql).setInteger("projectId", projectId).setString("buildNum", buildNum);
        List<Map> list = query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        Map<String, Map<String, String>> map = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(list)) {
            Map<String, String> childItemMap = null;
            for (Map m : list) {
                String unitNum = m.get("unitNum").toString();
                String num = m.get("num").toString();
                String houseType = m.get("houseType").toString();
                childItemMap = map.get(unitNum);
                childItemMap = Collections3.isEmpty(childItemMap) ? Maps.<String, String>newLinkedHashMap() : childItemMap;

                childItemMap.put(num, houseType);

                map.put(unitNum, childItemMap);
            }
        }
        return map;
    }


    /**
     * 得到所有入户/房源<主表id,List<家庭成员>>
     *
     * @return
     */
    public Map<Integer, List<House>> getHouseMap() {
        String hql = "from House h inner join fetch h.family f inner join fetch h.project order by f.id,h.id";
        Query query = this.getSession().createQuery(hql);
        List<House> houseList = query.list();
        Map<Integer, List<House>> familyPersonMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(houseList)) {
            for (House house : houseList) {
                List<House> itemList = familyPersonMap.get(house.getFamily().getId()) == null ? new ArrayList<House>() : familyPersonMap.get(house.getFamily().getId());
                itemList.add(house);
                familyPersonMap.put(house.getFamily().getId(), itemList);
            }
        }
        return familyPersonMap;
    }
}
