package com.app.cq.web.cq;

import com.app.cq.exception.Precondition;
import com.app.cq.model.*;
import com.app.cq.service.*;
import com.app.cq.utils.GetCurrentUser;
import com.app.permission.model.User;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sqds.page.PageInfo;
import com.sqds.utils.StringUtils;
import com.sqds.utils.pdf.PdfDocumentGenerator;
import com.sqds.web.ParamUtils;
import com.sqds.web.Servlets;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 管理员维护
 * Created by jmdf on 2018/9/17.
 */
@Controller
@RequestMapping("/cq/dataAdmin/*")
public class DataAdminController {

    @Autowired
    private FamilyService familyService;
    @Autowired
    private FamilyPersonService familyPersonService;
    @Autowired
    private FamilyHouseService familyHouseService;
    @Autowired
    private AlterInfoService alterInfoService;
    @Autowired
    private FamilyController familyController;
    @Autowired
    private FamilyPersonHouseService familyPersonHouseService;
    @Autowired
    private DisabilityLowService disabilityLowService;

    /**
     *  家庭基础信息列表
     */
    @RequestMapping("list")
    public void list(HttpServletRequest request, ModelMap modelMap){
        PageInfo<Family> pageInfo = new PageInfo<>();
        Servlets.initPageInfo(request, pageInfo);
        User user = GetCurrentUser.getLoginUser(request);
        String departmentCode = user.getDepartment().getDepartmentCode();
        if (!departmentCode.equals("110")) {
            pageInfo.addParameter("search_eq_string_section", departmentCode);
        }
        pageInfo = familyService.list(pageInfo);
        modelMap.put("pageInfo", pageInfo);
        modelMap.put("departmentCode", departmentCode);
    }

    /**
     * 家庭编号查重
     * @param request
     * @return
     */
    @RequestMapping("checkRepeat")
    @ResponseBody
    public boolean checkRepeat(ServletRequest request) {
        String familyCode = ParamUtils.getString(request, "familyCode", "");
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.familyService.checkRepeat(familyCode, familyId);
        if (family != null) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 表单
     */
    @RequestMapping("rhForm")
    public void rhForm(HttpServletRequest request, ModelMap modelMap) {
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.familyService.get(familyId);
        family = family == null ? new Family() : family;

        List<FamilyPerson> familyPersonList = this.familyPersonService.listByFamilyId(familyId);
        List<DisabilityLow> familyCjList = this.disabilityLowService.cjListByFamilyId(familyId);
        List<DisabilityLow> familyDbList = this.disabilityLowService.dbListByFamilyId(familyId);

        modelMap.addAttribute("family", family);
        modelMap.put("pageName", "rhForm");
        modelMap.addAttribute("familyPersonList", familyPersonList);
        modelMap.addAttribute("familyCjList", familyCjList);
        modelMap.addAttribute("familyDbList", familyDbList);
    }


    /**
     * 基础数据保存
     *
     * @param request
     * @return
     */
    @RequestMapping("rhSave")
    @ResponseBody
    public Map rhSave(HttpServletRequest request) {
        Map map = Maps.newHashMap();
        try {
            this.familyService.familySave(request);
            map.put("success", "true");
            map.put("message", "保存成功！");
        } catch (Exception e) {
            map.put("success", "false");
            map.put("message", "保存失败！");
        }
        return map;
    }

    /**
     * 标准自建房登记页面
     * @param request
     * @param modelMap
     */
    @RequestMapping("familyHouseForm")
    public void familyHouseForm(HttpServletRequest request,ModelMap modelMap){
        this.familyController.familyHouseForm(request,modelMap);
        /*Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Integer familyHouseId = ParamUtils.getInt(request,"familyHouseId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyHouse> familyHouseList = Lists.newArrayList();
        familyHouseList = this.familyHouseService.listByFamilyId(family.getId());
        FamilyHouse familyHouse = this.familyHouseService.get(familyHouseId);
        //从列表进入
        if (familyHouse == null){
            //该家庭还没有登记过标准自建
            if (familyHouseList.size() == 0){
                familyHouse = new FamilyHouse();
            }else {     //该家庭登记过标准自建，初始为第一个
                familyHouse = familyHouseList.get(0);
            }
        }
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyHouseList",familyHouseList);
        modelMap.addAttribute("familyHouse",familyHouse);*/
    }

    /**
     * 标准自建房保存
     * @param request
     * @return
     */
    @RequestMapping("familyHouseSave")
    @ResponseBody
    public Map<String,String> familyHouseSave(HttpServletRequest request){
        Map<String,String> map = Maps.newHashMap();
        map = this.familyHouseService.familyHouseSave(request);
        return map;
    }

    /**
     * 标准自建房删除
     * @param request
     * @return
     */
    @RequestMapping("deleteFamilyHouse")
    @ResponseBody
    public Map<String,String> deleteFamilyHouse(HttpServletRequest request){
        Map<String,String> map = Maps.newHashMap();

        Integer familyHouseId = ParamUtils.getInt(request,"familyHouseId",0);
        Integer familyId = ParamUtils.getInt(request,"familyId",0);

        List<FamilyHousePerson> familyHousePersonList = this.familyPersonHouseService.listByFamilyHouseId(familyHouseId);
        if (familyHousePersonList.size()>0){
            map.put("success","error");
            map.put("message","请先删除房屋成员信息！");
        }else{
            this.familyHouseService.deleteFamilyHouse(request);
            map.put("success","true");
            map.put("message","删除成功！");
            map.put("familyId",familyId.toString());
        }
        return map;
    }

    /**
     * 标准自建房增加
     * @param request
     * @param modelMap
     */
    @RequestMapping("familyHouseAdd")
    public void familyHouseAdd(HttpServletRequest request,ModelMap modelMap){
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        Family family = this.familyService.get(familyId);
        List<FamilyHouse> familyHouseList = Lists.newArrayList();
        familyHouseList = this.familyHouseService.listByFamilyId(family.getId());
        FamilyHouse familyHouse = new FamilyHouse();
        modelMap.addAttribute("familyHouse",familyHouse);
        modelMap.addAttribute("family",family);
        modelMap.addAttribute("familyHouseList",familyHouseList);
    }

    /**
     * 评估数据表单页面
     */
    @RequestMapping("pgForm")
    public void pgForm(HttpServletRequest request, ModelMap modelMap) {
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = familyService.get(familyId);
        Precondition.checkSqdsArguement(family != null, "数据错误，请重试！");
        modelMap.put("pageName", "pgForm");
        modelMap.put("family", family);
    }

    /**
     * 评估信息保存
     */
    @RequestMapping("pgSave")
    @ResponseBody
    public Map pgSave(HttpServletRequest request) {
        Map map = Maps.newHashMap();
        Integer familyId = ParamUtils.getInt(request,"familyId",0);
        try {
            Family family = this.familyService.get(familyId);
            Servlets.bind(request,family);
            this.familyService.save(family);
            map.put("success", "true");
            map.put("message", "保存成功！");
        } catch (Exception e) {
            map.put("success", "false");
            map.put("message", "保存失败！");
        }
        return map;
    }

    /**
     * 变更申请管理
     */
    @RequestMapping("changeList")
    public void changList() {

    }

    /**
     * 变更申请表单
     */
    @RequestMapping("changeForm")
    public void changForm(HttpServletRequest request, ModelMap modelMap) {
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.familyService.get(familyId);
        modelMap.put("family", family);
    }

    /**
     * 变更申请保存
     */
    @RequestMapping("changeSave")
    public String changeSave(HttpServletRequest request) {
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        User user = GetCurrentUser.getLoginUser(request);

        Family family = this.familyService.get(familyId);
        AlterInfo alterInfo = new AlterInfo();
        Servlets.bind(request, alterInfo);

        alterInfo.setAlterPerson(user.getRealName());
        alterInfo.setAlterDate(new Date());
        alterInfo.setFamilyCode(family.getFamilyCode());
        alterInfo.setAddress(family.getAddress());
        alterInfo.setFamily(family);

        this.alterInfoService.save(alterInfo);
        return "redirect:applyList";
    }

    /**
     * 数据修改申请列表
     **/
    @RequestMapping("applyList")
    public void applyList(HttpServletRequest request, ModelMap modelMap) {
        PageInfo<AlterInfo> pageInfo = new PageInfo<AlterInfo>();
        Servlets.initPageInfo(request, pageInfo);
        pageInfo = this.alterInfoService.list(pageInfo);
        modelMap.put("pageInfo", pageInfo);
    }

    /**
     * 数据变更申请单打印
     */
    @RequestMapping("print")
    public void print(HttpServletRequest request, ModelMap modelMap) {
        Integer alterInfoId = ParamUtils.getInt(request, "alterInfoId", 0);
        AlterInfo alterInfo = this.alterInfoService.get(alterInfoId);
        Precondition.checkSqdsArguement(alterInfo != null, "数据不存在！");
        modelMap.addAttribute("alterInfo", alterInfo);
    }

    /**
     * 数据变更申请单打印
     */
    @RequestMapping("printPDF")
    public void printPDF(HttpServletRequest request, HttpServletResponse response) throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException, IllegalAccessException {
        Integer alterInfoId = ParamUtils.getInt(request, "alterInfoId", 0);
        AlterInfo alterInfo = this.alterInfoService.listById(alterInfoId);
        Family family = alterInfo.getFamily();
        Map map = Maps.newHashMap();
        map.put("alterInfo", alterInfo);
        map.put("family", family);
        String template = "alterInfoPrint.html";
        PdfDocumentGenerator pdfDocumentGenerator = new PdfDocumentGenerator();
        OutputStream outputStream = null;
        try {
            //得到response输出流
            outputStream = response.getOutputStream();
            pdfDocumentGenerator.generate(template, map, outputStream);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                outputStream.flush();
                outputStream.close();
                response.reset();
            } catch (Exception e) {
            }
        }
    }

    @RequestMapping("ajaxFamilyInfo")
    @ResponseBody
    public void ajaxFamilyInfo(HttpServletRequest request,HttpServletResponse response) {
        String query = ParamUtils.getString(request,"query","");
        List<Family> list = this.familyService.listByParam(query);
        if (list == null || list.size() == 0) {
            return;
        }
        StringBuffer jsonstr = new StringBuffer();
        // json数据格式
        /**
         * { query:'Li', // Original request suggestions:['Liberia','Libyan Arab
         * Jamahiriya','Liechtenstein','Lithuania'], // List of suggestions
         * data:['LR','LY','LI','LT'] // Optional parameter: list of keys for
         * suggestion options; used in callback functions. }
         */
        jsonstr.append("{query:'" + query + "',suggestions:[");
        int index = list.size();
        int i = 0;
        for (Family family : list) {
            String str = StringUtils.getNotNullString(family.getName()) + "   "
                    + StringUtils.getNotNullString(family.getIdCard())+ "    "
                    +StringUtils.getNotNullString(family.getFamilyCode());
            jsonstr.append("'" + str + "'");
            if ((i + 1) != index) {
                jsonstr.append(",");
            }
            i += 1;
        }
        jsonstr.append("],data:[");
        i = 0;// 初始化i
        for (Family family : list) {
            String str = StringUtils.getNotNullString(family.getFamilyCode());
            jsonstr.append("'" + str + "'");
            if ((i + 1) != index) {
                jsonstr.append(",");
            }
            i += 1;
        }
        jsonstr.append("]}");
        PrintWriter out = null;
        try {
            out = response.getWriter();
            response.setContentType("application/json; charset=utf-8");
            // 防止JSP页面缓存造成ajax数据不刷新
            response.setHeader("Cache-Control", "no-store");
            response.setHeader("Pragma", "no-cache");
            response.setDateHeader("Expires", 0);
            out.print(jsonstr.toString());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    /**
     * 验证家庭信息是否存在
     *
     * @param request
     */
    @RequestMapping("validateIsExists")
    @ResponseBody
    public Map validateIsExists(HttpServletRequest request) {
        String familyCode = ParamUtils.getString(request, "familyCode", "");
        Family family = null;
        int status = 1;
        String message = "";

        try {
            family = this.familyService.findOneByProperty("familyCode",familyCode);
        } catch (Exception e) {
            status = 3;
            message = "输入数据有误";
        }


        int familyId = 0;
        if (family == null) {
            status = 2;
            message = "找不到该户数据，请检查输入内容是否正确";
        }else if (family.getCqStatus() != 2){
            status = 3;
            message = "该户入户信息未锁定";
        }else if (family.getPgStatus() != 2){
            status = 3;
            message = "该户评估信息未锁定";
        }
        if (status == 1) {
            familyId = family.getId();
        }

        Map map = new HashMap();
        map.put("status", status);
        map.put("message", message);
        map.put("familyId", familyId);
        return map;
    }
}
