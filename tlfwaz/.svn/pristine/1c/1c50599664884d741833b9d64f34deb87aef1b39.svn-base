package com.app.cq.service;

import com.app.cq.en.SignStatus;
import com.app.cq.model.Family;
import com.sqds.hibernate.HibernateDao;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Service;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * 综合统计查询
 * Created by jmdf on 2018/9/6.
 */
@Service
public class StatisticsService extends HibernateDao<Family> {

    //安置房整体情况统计
    public Map<String,Map<String,Map<String,Map>>> houseMap() {
        String sql = "select a.areaName,h.buildNum,h.houseType," +
                "COUNT(h.id) as allCount," +//全部房源数量
                "SUM(IFNULL(h.buildArea,0)) as allArea," +//全部面积
                "SUM(case when h.houseStatus > 1 then 1 else 0 end) as signCount," +//已选房源数量
                "SUM(case when h.houseStatus > 1 then IFNULL(buildArea,0) else 0 end) as signArea," +//已选房源面积
                "SUM(case when h.houseStatus = 1 then 1 else 0 end) as noSignCount," +//剩余房源数量
                "SUM(case when h.houseStatus = 1 then IFNULL(buildArea,0) else 0 end) as noSignArea" +//剩余房源面积
                " from house h inner join area a on a.id = h.areaId group by a.areaName,h.buildNum,h.houseType" +
                " order by a.areaName,h.buildNum,h.houseType";
        List<Map> mapList = this.getSession().createSQLQuery(sql).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        Map<String,Map<String,Map<String,Map>>> map = new LinkedHashMap<>();
        for (Map m:mapList){
            String areaName = String.valueOf(m.get("areaName"));
            String buildNum = String.valueOf(m.get("buildNum"));
            String houseType = String.valueOf(m.get("houseType"));
            Map<String,Map<String,Map>> buildNumMap = map.get(areaName) == null?new LinkedHashMap<String, Map<String, Map>>():map.get(areaName);
            Map<String,Map> houseTypeMap = buildNumMap.get(buildNum) == null?new LinkedHashMap<String, Map>():buildNumMap.get(buildNum);
            houseTypeMap.put(houseType,m);
            buildNumMap.put(buildNum,houseTypeMap);
            map.put(areaName,buildNumMap);
        }
        return map;

    }

    //安置房整体情况统计
    public List houseStatistics() {
        String sql = "select h.houseType," +
                "COUNT(h.id) as allCount," +//全部房源数量
                "SUM(IFNULL(h.buildArea,0)) as allArea," +//全部面积
                "SUM(case when h.houseStatus > 1 then 1 else 0 end) as signCount," +//已选房源数量
                "SUM(case when h.houseStatus > 1 then IFNULL(buildArea,0) else 0 end) as signArea," +//已选房源面积
                "SUM(case when h.houseStatus = 1 then 1 else 0 end) as noSignCount," +//剩余房源数量
                "SUM(case when h.houseStatus = 1 then IFNULL(buildArea,0) else 0 end) as noSignArea" +//剩余房源面积
                " from house h group by h.houseType" +
                " order by h.houseType";
        return this.getSession().createSQLQuery(sql).list();

    }

    /**
     * 整体情况统计
     */
    public Map<String,Map> processMap() {
        String sql = "select a.areaName," +
                "count(f.id) as allCount," +  //总户数
                "sum(case when f.xfBatch is not null then 1 else 0 end) as xfBatch," +  //选房批次设置数量
                "sum(case when f.xfStatus = "+ SignStatus.SIGN.getIndex()+" then 1 else 0 end) as houseCount," +  //选房户数
                "sum(case when f.signStatus = "+ SignStatus.SIGN.getIndex()+" then 1 else 0 end) as signCount," +  //签约户数
                "sum(case when f.jsStatus = "+ SignStatus.SIGN.getIndex()+" then 1 else 0 end) as jsCount" +  //结算户数
                " from family f inner join area a on a.id = f.areaId" +
                " group by a.areaName order by a.areaName";
        List<Map> list = this.getSession().createSQLQuery(sql).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        Map<String,Map> map = new LinkedHashMap<>();
        for (Map m:list){
            String areaName = String.valueOf(m.get("areaName"));
            map.put(areaName,m);
        }
        return map;
    }
}
