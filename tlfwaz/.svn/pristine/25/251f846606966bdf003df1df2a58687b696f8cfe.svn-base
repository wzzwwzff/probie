package com.app.cq.service;

import com.app.common.model.DataDict;
import com.app.common.service.DataDictService;
import com.app.cq.model.Family;
import com.app.cq.model.FamilyPerson;
import com.sqds.exception.SqdsException;
import com.sqds.hibernate.HibernateDao;
import com.sqds.page.PageInfo;
import com.sqds.web.ParamUtils;
import com.sqds.utils.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * Created by jmdf on 2018/9/5.
 */
@Service
public class FamilyService extends HibernateDao<Family> {
    @Autowired
    private FamilyPersonService familyPersonService;
    @Autowired
    private DataDictService dataDictService;
    @Autowired
    private ProjectService projectService;
    @Autowired
    private AreaService areaService;

    /**
     * 获取家庭list 三表联查
     */
    public PageInfo<Family> familyList(PageInfo<Family> pageInfo) {
        return this.list(pageInfo, "from Family f left join fetch f.project p left join fetch f.area a order by p.id,a.id,f.familyCode,f.id");
    }

    /**
     * 保存
     */
    public synchronized void saveFamily(HttpServletRequest request, Family family){
        save(family);

        //保存在册人口
        String[] familyIdArray  = ParamUtils.getStringParameters(request, "pId");

        if (familyIdArray  != null && familyIdArray .length > 0) {
            String[] familyPersonName = ParamUtils.getStringParameters(request, "pName");
            String[] familyPersonSex = ParamUtils.getStringParameters(request, "pSex");
            String[] familyPersonIdCard = ParamUtils.getStringParameters(request, "pIdCard");
            String[] familyPersonPhone = ParamUtils.getStringParameters(request, "pPhone");
            String[] familyPersonRelation = ParamUtils.getStringParameters(request, "pRelation");
            String[] familyPersonAddress = ParamUtils.getStringParameters(request, "pAddress");
            String[] familyPersonIsRegistered = ParamUtils.getStringParameters(request, "isRegistered");
            String[] familyPersonMemo = ParamUtils.getStringParameters(request, "pMemo");
            FamilyPerson familyPerson = null;
            for (int i = 0; i < familyIdArray .length; i++) {
                if (StringUtils.isEmpty(familyPersonName[i].trim())) {
                    if (StringUtils.isNotEmpty(familyIdArray[i])) {
                        this.familyPersonService.deleteByFamilyId(Integer.valueOf(familyIdArray[i]));
                    }
                    continue;
                }
                familyPerson = null;
                if (StringUtils.isNotEmpty(familyIdArray[i])) {
                    familyPerson = this.familyPersonService.get(Integer.valueOf(familyIdArray[i]));
                }

                if (familyPerson == null) {
                    familyPerson = new FamilyPerson();
                    familyPerson.setFamily(family);
                }

                List<DataDict> sexList = dataDictService.getDataDictList("在册/非在册");
                Integer isRegistered = 0;
                for (int j = 0; j < sexList.size(); j++) {
                    if (sexList.get(i).getAttributeName().equals(familyPersonIsRegistered[i])){
                        isRegistered = Integer.valueOf(sexList.get(i).getAttributeValue());
                    }
                }

                familyPerson.setpName(familyPersonName[i]);
                familyPerson.setpSex(Integer.valueOf(familyPersonSex[i]));
                familyPerson.setpIdCard(familyPersonIdCard[i]);
                familyPerson.setpPhone(familyPersonPhone[i]);
                familyPerson.setpRelation(familyPersonRelation[i]);
                familyPerson.setpAddress(familyPersonAddress[i]);
                familyPerson.setIsRegistered(isRegistered);
                familyPerson.setpMemo(familyPersonMemo[i]);
                this.familyPersonService.save(familyPerson);
            }
        }
    }


    /**
     * 删除family及对应人员
     * @param familyId
     */
    public void  deleteByFamilyId(Integer familyId){
        Family family = this.get(familyId);
        if (family == null) {
            throw new SqdsException("家庭信息不存在");
        }

        familyPersonService.deleteByFamilyId(familyId);
        this.delete(familyId);
    }

    /**
     * 编号重复验证
     * @param familyCode
     * @param familyId
     * @return
     */
    public Family checkRepeat(String familyCode, Integer familyId) {
        String hql = "from Family where familyCode=? and id!=?";
        return findUnique(hql, familyCode, familyId);
    }

}
