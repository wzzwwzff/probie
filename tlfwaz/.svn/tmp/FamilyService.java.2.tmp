package com.app.cq.service;

import com.app.common.model.DataDict;
import com.app.common.service.DataDictService;
import com.app.cq.en.DataPhase;
import com.app.cq.exception.Precondition;
import com.app.cq.model.Family;
import com.app.cq.model.FamilyPerson;
import com.app.cq.model.House;
import com.google.common.collect.Lists;
import com.sqds.exception.SqdsException;
import com.sqds.hibernate.HibernateDao;
import com.sqds.page.PageInfo;
import com.sqds.web.ParamUtils;
import com.sqds.utils.StringUtils;
import com.sqds.web.Servlets;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by jmdf on 2018/9/5.
 */
@Service
public class FamilyService extends HibernateDao<Family> {
    @Autowired
    private FamilyPersonService familyPersonService;
    @Autowired
    private DataDictService dataDictService;
    @Autowired
    private HouseService houseService;
    @Autowired
    private HistoryInfoService historyInfoService;
    @Autowired
    private ProjectService projectService;
    @Autowired
    private AreaService areaService;

    /**
     * 获取家庭list 三表联查
     */
    public PageInfo<Family> familyList(PageInfo<Family> pageInfo) {
        return this.list(pageInfo, "from Family f left join fetch f.project p left join fetch f.area a order by p.id,a.id,f.familyCode,f.id");
    }

    /**
     * 获取家庭form 三表联查
     */
    public Family familyForm(int familyId) {
        String hql = "from Family f left join fetch f.project p left join fetch f.area a where f.id = ? order by p.id,a.id,f.familyCode,f.id";
        return findUnique(hql,familyId);
    }

    /**
     * 获取未电话通知list 三表联查
     */
    public PageInfo<Family> phoneList(PageInfo<Family> pageInfo) {
        return this.list(pageInfo, "from Family f left join fetch f.project p left join fetch f.area a where f.xfStatus = 1 and f.xfBatch is not null and f.xfBatch <> '' order by p.id,a.id,f.familyCode,f.id");
    }

    /**
     * 保存
     */
    public synchronized void saveFamily(HttpServletRequest request, Family family){
        save(family);

        //保存在册人口
        String[] familyIdArray  = ParamUtils.getStringParameters(request, "pId");

        if (familyIdArray  != null && familyIdArray .length > 0) {
            String[] familyPersonName = ParamUtils.getStringParameters(request, "pName");
            String[] familyPersonSex = ParamUtils.getStringParameters(request, "pSex");
            String[] familyPersonIdCard = ParamUtils.getStringParameters(request, "pIdCard");
            String[] familyPersonPhone = ParamUtils.getStringParameters(request, "pPhone");
            String[] familyPersonRelation = ParamUtils.getStringParameters(request, "pRelation");
            String[] familyPersonAddress = ParamUtils.getStringParameters(request, "pAddress");
            String[] familyPersonIsRegistered = ParamUtils.getStringParameters(request, "isRegistered");
            String[] familyPersonMemo = ParamUtils.getStringParameters(request, "pMemo");
            String[] familyPersonAddressType = ParamUtils.getStringParameters(request, "pAddressType");
            String[] familyPersonAge = ParamUtils.getStringParameters(request, "pAge");
            String[] familyPersonLiveStatus = ParamUtils.getStringParameters(request, "pLiveStatus");
            FamilyPerson familyPerson = null;
            for (int i = 0; i < familyIdArray .length; i++) {
                if (StringUtils.isEmpty(familyPersonName[i].trim())) {
                    if (StringUtils.isNotEmpty(familyIdArray[i])) {
                        this.familyPersonService.deleteByFamilyId(Integer.valueOf(familyIdArray[i]));
                    }
                    continue;
                }
                familyPerson = null;
                if (StringUtils.isNotEmpty(familyIdArray[i])) {
                    familyPerson = this.familyPersonService.get(Integer.valueOf(familyIdArray[i]));
                }

                if (familyPerson == null) {
                    familyPerson = new FamilyPerson();
                    familyPerson.setFamily(family);
                }

                List<DataDict> sexList = dataDictService.getDataDictList("在册/非在册");
                Integer isRegistered = 0;
                for (int j = 0; j < sexList.size(); j++) {
                    if (sexList.get(i).getAttributeName().equals(familyPersonIsRegistered[i])){
                        isRegistered = Integer.valueOf(sexList.get(i).getAttributeValue());
                    }
                }
                List<DataDict> addressTypeList = dataDictService.getDataDictList("户籍性质");
                Integer addressType = 0;
                for (int j = 0; j < addressTypeList.size(); j++) {
                    if (addressTypeList.get(i).getAttributeName().equals(familyPersonAddressType[i])){
                        addressType = Integer.valueOf(addressTypeList.get(i).getAttributeValue());
                    }
                }

                familyPerson.setAddressType(addressType);
                familyPerson.setAge(Integer.valueOf(familyPersonAge[i]));
                familyPerson.setLiveStatus(familyPersonLiveStatus[i]);
                familyPerson.setpName(familyPersonName[i]);
                familyPerson.setpSex(Integer.valueOf(familyPersonSex[i]));
                familyPerson.setpIdCard(familyPersonIdCard[i]);
                familyPerson.setpPhone(familyPersonPhone[i]);
                familyPerson.setpRelation(familyPersonRelation[i]);
                familyPerson.setpAddress(familyPersonAddress[i]);
                familyPerson.setIsRegistered(isRegistered);
                familyPerson.setpMemo(familyPersonMemo[i]);
                this.familyPersonService.save(familyPerson);
            }
        }
    }

    /**
     * 删除family及对应人员
     * @param familyId
     */
    public void  deleteByFamilyId(Integer familyId){
        Family family = this.get(familyId);
        if (family == null) {
            throw new SqdsException("家庭信息不存在");
        }

        familyPersonService.deleteByFamilyId(familyId);
        this.delete(familyId);
    }

    /**
     * 编号重复验证
     * @param familyCode
     * @param familyId
     * @return
     */
    public Family checkRepeat(String familyCode, Integer familyId) {
        String hql = "from Family where familyCode=? and id!=?";
        return findUnique(hql, familyCode, familyId);
    }

    /**
     * 已选房源列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> getChooseHouseList(PageInfo<Family> pageInfo) {
        pageInfo.setAutoCount(false);//关闭分页条数统计
        String hql = "from Family f inner join fetch f.houseList h inner join fetch h.azProject p where f.xfDate is not null order by h.chooseDate desc,f.familyCode";
        pageInfo = this.list(pageInfo,hql);
        pageInfo.setTotalCount(this.findLong(pageInfo,"select count(distinct f.id) from Family f where f.xfDate is not null").intValue());
        return pageInfo;
    }

    /**
     * 财务保存
     */
    public void financeSave(HttpServletRequest request) {
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.get(familyId);
        Precondition.checkAjaxArguement(family != null, "0010", "数据有误，请刷新重试");
        List<FamilyPerson> familyPersonList = this.familyPersonService.listByFamilyId(familyId);
        Servlets.bind(request, family);
        this.save(family);
        List<House> houseList = houseService.getHouseListByFamilyId(family.getId());
        historyInfoService.histroySave(request,family,familyPersonList,houseList, DataPhase.FINANCE.getIndex());
    }

    /**
     * 查询身份证号或姓名 like param 的家庭
     * @param param
     * @return
     */
    public List<Family> listByParam(String param) {
        StringBuffer hql = new StringBuffer("from Family fy where 1=1 ");
        List<Object> data = new ArrayList<Object>();
        if (param == null || param.equals("")) {
            return this.list(hql.toString());
        }
        hql.append("and ( fy.familyCode like ? ");
        data.add("%" + param + "%");
        hql.append("or fy.name like ? )");
        data.add("%" + param + "%");
        List<Family> list = this.list(hql.toString(), data.toArray());
        return list;
    }

    /*************************************************
     * 每天签约数
     * @return
     */
    public List<Map> getTodayData() {
        String sql =  " select  convert(varchar(10),signDate,23 ) ,COUNT(*) as signNum from  family group by convert(varchar(10),signDate,23 )  order by convert(varchar(10),signDate,23 ) desc";
        return this.getSession().createSQLQuery(sql).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
    }

    /**
     * 家庭成员保存
     */
    public synchronized void saveFamilyPerson(HttpServletRequest request) {
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.get(familyId);
        if (family == null) {
            family = new Family();
        }
        Servlets.bind(request, family);

        this.save(family);

        //保存家庭成员信息
        String[] familyIdArray = ParamUtils.getStringParameters(request, "f_id");
        String[] familyPersonNameArray = ParamUtils.getStringParameters(request, "f_pName");
        String[] familyRelationArray = ParamUtils.getStringParameters(request, "f_pRelation");
        String[] familySexArray = ParamUtils.getStringParameters(request, "f_pSex");
        String[] familyIdCardArray = ParamUtils.getStringParameters(request, "f_pIdCard");
        String[] familyPhoneArray = ParamUtils.getStringParameters(request, "f_pPhone");
        String[] familyIsRegisteredArray = ParamUtils.getStringParameters(request, "f_isRegistered");
        String[] familyAddressType = ParamUtils.getStringParameters(request, "f_addressType");
        String[] familyPAddressArray = ParamUtils.getStringParameters(request, "f_pAddress");
        String[] familyPMemoArray = ParamUtils.getStringParameters(request, "f_pMemo");

        List<String[]> list = Lists.newArrayList();
        list.add(0, familyIdArray);
        list.add(1, familyPersonNameArray);
        list.add(2, familyRelationArray);
        list.add(3, familySexArray);
        list.add(4, familyIdCardArray);
        list.add(5, familyPhoneArray);
        list.add(6, familyIsRegisteredArray);
        list.add(7, familyAddressType);
        list.add(8, familyPAddressArray);
        list.add(9, familyPMemoArray);
        familyPersonService.saveFamilyPerson(list, family);

        List<FamilyPerson> familyPersonList = familyPersonService.listByFamilyId(familyId);
        List<House> houseList = houseService.getChooseHouseById(family.getId());

        //historyInfoService.histroySave(request,family,familyPersonList,houseList,DataPhase.RH.getIndex());
    }

}
