package com.app.cq.service;

import com.alibaba.fastjson.JSON;
import com.app.cq.model.Family;
import com.app.cq.model.FamilyPerson;
import com.app.cq.model.HistoryInfo;
import com.app.cq.utils.*;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sqds.exception.SqdsException;
import com.sqds.hibernate.HibernateDao;
import com.sqds.page.PageInfo;
import com.sqds.utils.*;
import com.sqds.web.ParamUtils;
import org.hibernate.transform.Transformers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 家庭及协议
 * @author zsj
 * @date 2017/11/10
 */
@Service
@Transactional
public class FamilyService extends HibernateDao<Family> {
    private Logger logger = LoggerFactory.getLogger(FamilyService.class);
    @Autowired
    private FamilyPersonService familyPersonService;
    @Autowired
    private HistoryInfoService historyInfoService;
    @Resource
    private ActionInfoService actionInfoService;
    @Resource
    private BackInfoService backInfoService;



    /**
     * 拆迁家庭列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> familyList(PageInfo<Family> pageInfo){
        String hql = "from Family f order by f.familyCode";
        return list(pageInfo,hql);
    }


    @Transactional
    public void updateRHStatus(String familyCode){
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = DBUtil.DBU();
            ps = conn.prepareStatement("UPDATE family SET rhStatus = 2 WHERE familyCode = asd");
            //ps.setString(1,familyCode);
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }






    /**
     * @author lsh
     * @note 保存入户信息及家庭成员信息
     * @param family
     * @param userName
     * @param ip
     */
    public void saveFamily(HttpServletRequest request, Family family,String userName,String ip){
        save(family);

        //保存在册人口
        String[] familyIdArray  = ParamUtils.getStringParameters(request, "f_id");

        if (familyIdArray  != null && familyIdArray .length > 0) {
            String[] familyPersonNameArray = ParamUtils.getStringParameters(request, "f_personName");
            String[] familySexArray = ParamUtils.getStringParameters(request, "f_sex");
            String[] familyIdCardArray = ParamUtils.getStringParameters(request, "f_idCard");
            String[] familyAgeArray = ParamUtils.getStringParameters(request, "f_age");
            String[] familyRelationArray = ParamUtils.getStringParameters(request, "f_relation");
            String[] familyOneTypeArray = ParamUtils.getStringParameters(request, "f_oneType");
            String[] familyUnitArray = ParamUtils.getStringParameters(request, "f_unit");
            String[] familyMarrTypeArray = ParamUtils.getStringParameters(request, "f_marrType");
            String[] familyPregnancyArray = ParamUtils.getStringParameters(request, "f_pregnancyType");
            String[] familyQrDateArray = ParamUtils.getStringParameters(request, "f_qrDate");
            String[] familyStatusArray = ParamUtils.getStringParameters(request, "f_status");
            String[] familyTelArray = ParamUtils.getStringParameters(request, "f_tel");
            String[] familyAddressArray = ParamUtils.getStringParameters(request, "f_address");
            String[] familyMemoArray = ParamUtils.getStringParameters(request, "f_memo");
            FamilyPerson familyPerson = null;
            for (int i = 0; i < familyIdArray .length; i++) {

                if (StringUtils.isEmpty(familyPersonNameArray[i].trim())) {
                    if (StringUtils.isNotEmpty(familyIdArray[i])) {
                        this.familyPersonService.deleteByFamilyId(Integer.valueOf(familyIdArray[i]));
                    }
                    continue;
                }
                familyPerson = null;
                if (StringUtils.isNotEmpty(familyIdArray[i])) {
                    familyPerson = this.familyPersonService.get(Integer.valueOf(familyIdArray[i]));
                }

                if (familyPerson == null) {
                    familyPerson = new FamilyPerson();
                    familyPerson.setFamily(family);
                }

                familyPerson.setPersonName(familyPersonNameArray[i]);
                familyPerson.setSex(Integer.valueOf(familySexArray[i]));
                familyPerson.setOneType(Integer.valueOf(familyOneTypeArray[i]));
                familyPerson.setIdCard(familyIdCardArray[i]);
                familyPerson.setTel(familyTelArray[i]);
                familyPerson.setAddress(familyAddressArray[i]);
                familyPerson.setRelation(familyRelationArray[i]);
                if (StringUtils.isNotEmpty(familyAgeArray[i])) {
                    try {
                        familyPerson.setAge(Integer.valueOf(familyAgeArray[i]));
                    }catch (Exception e){
                        throw new SqdsException("家庭成员"+familyPersonNameArray[i]+"的年龄请输入整数");
                    }
                }
                familyPerson.setMarrType(Integer.valueOf(familyMarrTypeArray[i]));
                familyPerson.setPregnancyType(Integer.valueOf(familyPregnancyArray[i]));
                if (StringUtils.isNotEmpty(familyQrDateArray[i])){
                    familyPerson.setQrDate(com.sqds.utils.DateUtils.string2date(familyQrDateArray[i]));
                }
                familyPerson.setStatus(Integer.valueOf(familyStatusArray[i]));
                familyPerson.setUnit(familyUnitArray[i]);
                familyPerson.setMemo(familyMemoArray[i]);

                this.familyPersonService.save(familyPerson);
            }
        }

        List<FamilyPerson> familyPersonList = familyPersonService.listByFamilyId(family.getId());
        //保存修改记录
        HistoryInfo historyInfo = new HistoryInfo();
        historyInfo.setFamilyId(family.getId());//家庭表Id
        historyInfo.setData(JSON.toJSONString(family));//家庭表信息
        historyInfo.setPersonData(JSON.toJSONString(familyPersonList));
        historyInfo.setOperateType("入户信息");
        historyInfo.setPerson(userName);//操作人姓名
        historyInfo.setComputerId(ip);//操作人IP地址
        historyInfo.setDoDate(new Date());
        historyInfoService.save(historyInfo);
    }

    /**
     * @author lsh
     * @note 保存评估信息
     * @param family
     * @param userName
     * @param ip
     */
    public void savechFamily(Family family, String userName,String ip){
        save(family);
        //保存修改记录
        HistoryInfo historyInfo = new HistoryInfo();
        historyInfo.setFamilyId(family.getId());//家庭表Id
        historyInfo.setData(JSON.toJSONString(family));//家庭表信息
        historyInfo.setOperateType("测绘信息");
        historyInfo.setPerson(userName);//操作人姓名
        historyInfo.setComputerId(ip);//操作人IP地址
        historyInfo.setDoDate(new Date());
        historyInfoService.save(historyInfo);
    }

    /**
     * @author lsh
     * @note 保存低保残疾大病
     * @param family
     * @param userName
     * @param ip
     */
    public void saveDifficultyFamily(Family family, String userName,String ip){
        save(family);
        //保存修改记录
        HistoryInfo historyInfo = new HistoryInfo();
        historyInfo.setFamilyId(family.getId());//家庭表Id
        historyInfo.setData(JSON.toJSONString(family));//家庭表信息
        historyInfo.setOperateType("低保残疾大病");
        historyInfo.setPerson(userName);//操作人姓名
        historyInfo.setComputerId(ip);//操作人IP地址
        historyInfo.setDoDate(new Date());
        historyInfoService.save(historyInfo);
    }


    /**
     * @author lsh
     * @note 保存评估信息
     * @param family
     * @param userName
     * @param ip
     */
    public void savepgFamily(Family family, String userName,String ip){
        save(family);
        //保存修改记录
        HistoryInfo historyInfo = new HistoryInfo();
        historyInfo.setFamilyId(family.getId());//家庭表Id
        historyInfo.setData(JSON.toJSONString(family));//家庭表信息
        historyInfo.setOperateType("评估信息");
        historyInfo.setPerson(userName);//操作人姓名
        historyInfo.setComputerId(ip);//操作人IP地址
        historyInfo.setDoDate(new Date());
        historyInfoService.save(historyInfo);
    }

    /**
     * @author lsh
     * @note 保存方案信息
     * @param family
     * @param userName
     * @param ip
     */
    public void saveSchemeFamily(Family family, String userName,String ip){
        CalcUtils.calc(family);
        //保存修改记录
        HistoryInfo historyInfo = new HistoryInfo();
        historyInfo.setFamilyId(family.getId());//家庭表Id
        historyInfo.setData(JSON.toJSONString(family));//家庭表信息
        historyInfo.setOperateType("方案信息");
        historyInfo.setPerson(userName);//操作人姓名
        historyInfo.setComputerId(ip);//操作人IP地址
        historyInfo.setDoDate(new Date());
        historyInfoService.save(historyInfo);
    }


    /**
     * 获取最大签约号
     */
    public Integer getMaxQyNumber(){
        String hql = "select ISNULL(MAX(qyNumber),0) from Family ";
        return this.findInt(hql);
    }

    /**
     * 获取最大交房顺序号
     */
    public Integer getMaxJfNumber(){
        String hql = "select ISNULL(MAX(jfNumber),0) from Family ";
        return this.findInt(hql);
    }


    /**
     * 签约情况统计
     *
     * @return
     */
    public Map<String,List<Map>> signCondition() {
        String hql = "select groupCode,sum(confirmBuildArea) as totalArea,sum(case when state=2 and qyState=1 and  DATEDIFF(DD,qyDate,GETDATE())=0 then 1 else 0 end) as todayQy,sum(case when state=1 and qyState=1 and  DATEDIFF(DD,qyDate,GETDATE())=0 then 1 else 0 end) as todayQy2," +
                "sum(case when state=2 and qyState=1 then 1 else 0 end) as totalQy,sum(case when state=1 and qyState=1 then 1 else 0 end) as totalQy2,sum(case when qyState=2 then 1 else 0 end) as noSign,sum(case when qyState=1 then 1 else 0 end) as sign  from family where state is not null and groupCode is not null group by groupCode";
        List<Map> mapList = (List<Map>) this.getSession().createSQLQuery(hql).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        Map<String,List<Map>> resultMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(mapList)){
            List<Map> valueList = Lists.newArrayList();
            for (Map map : mapList){
                String groupCode = map.get("groupCode").toString();
                valueList = resultMap.get(groupCode);
                valueList = Collections3.isEmpty(valueList) ? Lists.<Map>newArrayList() : valueList;
                valueList.add(map);
                resultMap.put(groupCode,valueList);
            }
        }
        return resultMap;
    }

    /**
     * 删除family及对应人员
     * @param familyId
     */
    public void  deleteByFamilyId(Integer familyId){
        Family family = this.get(familyId);
        if (family == null) {
            throw new SqdsException("家庭信息不存在");
        }

        familyPersonService.deleteByFamilyId(familyId);
        actionInfoService.deleteByFamilyId(familyId);
        backInfoService.deleteByFamilyId(familyId);
        this.delete(familyId);
    }


    public PageInfo<Family> listByQy(PageInfo<Family> pageInfo) {
        return this.list(pageInfo,"from Family where qyState = 1 order by qyDate desc");
    }


    /**
     * 查询今日签约户数
     * @return
     */
    public Integer getTodaySigned() {
        String sql = "select count (*) from Family where qyState = 1 and  DATEDIFF(DD,qyDate,GETDATE())=0 ";
        Integer count = (Integer) getSession().createSQLQuery(sql).uniqueResult();
        return count;
    }

    /**
     * 选房信息列表
     * @param pageInfo
     * @return
     */
    public PageInfo<Family> queryList(PageInfo<Family> pageInfo){
        return this.list(pageInfo,"from Family where xfDate is not null order by id desc");
    }




    /**
     * 编号重复验证
     * @param familyCode
     * @param familyId
     * @return
     */
    public Family checkRepeat(String familyCode, Integer familyId) {
        String hql = "from Family where familyCode=? and id!=?";
        return findUnique(hql, familyCode, familyId);
    }

    /**
     * 身份证号重复验证
     * @param idCard
     * @param familyId
     * @return
     */
    public Family checkIdCardRepeat(String idCard,Integer familyId){
        String hql = "from Family where idCard=? and id!=?";
        return findUnique(hql, idCard, familyId);
    }


    /**********************************************************************************
     * 得到签约顺序号
     */
    public synchronized void getSignNum(Integer familyId) {
        Family family = this.get(familyId);
        if (family.getQyState() == 1) {
            family.setQyState(2);
            family.setQyDate(new Date());
            family.setQyDateMillisecond(System.currentTimeMillis());
        }
        this.save(family);
    }


    /**
     * 获取交房顺序号
     * @param request
     */
    public synchronized void getjfNum(HttpServletRequest request) throws ParseException {
        Integer familyId = ParamUtils.getInteger(request, "familyId", 0);
        String jfDate = ParamUtils.getString(request,"jfDate","");
        Integer jfState = ParamUtils.getInt(request,"jfState",1);
        Family family = this.get(familyId);
        Precondition.checkAjaxArguement(family != null, "1000", "出错，请重试！");
        if (jfState == 2){
//        Precondition.checkAjaxArguement(family.getHandStatus() == HandStatus.SJYESPASS.getIndex(), "1001", "审计为初审通过！");
            //判断是否已经取过号了
            Precondition.checkAjaxArguement(family.getJfState() == 1, "1002", "该户已获取交房顺序号！");
            //得到最大交房顺序号
            Integer maxJfNumber = this.getMaxJfNumber();
            if (family.getJfNumber() == null) {
                maxJfNumber++;
                family.setJfState(2);
                family.setJfDate(new SimpleDateFormat("yyyy-MM-dd").parse(jfDate));
                family.setJfNumberDate(new Date());;
                family.setJfNumberDateMillisecond(System.currentTimeMillis());
                family.setJfNumber(maxJfNumber);
            }
            String operateType = "标记为已交房";
            actionInfoService.saveActionInfo(family,operateType);
        }
        this.save(family);
    }

    //得到已交房列表
    public PageInfo<Family> getjfNumberList(PageInfo<Family> pageInfo) {
        String hql = "from Family f where f.jfNumber is not null and jfNumber >0 order by jfNumber desc ,id";
        return this.list(pageInfo,hql);
    }
}
