package com.app.cq.web.cq;

import com.app.common.model.DataDict;
import com.app.common.service.DataDictService;
import com.app.cq.model.House;
import com.app.cq.model.Project;
import com.app.cq.service.HouseService;
import com.app.cq.service.ProjectService;
import com.google.common.collect.Maps;
import com.sqds.page.PageInfo;
import com.sqds.utils.Collections3;

import com.sqds.web.ParamUtils;
import com.sqds.web.Servlets;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.*;

/**
 * Created by jmdf on 2018/8/10.
 */
@Controller
@RequestMapping("/cq/house/*")
public class HouseController {

    @Resource
    private HouseService houseService;

    @Resource
    private DataDictService dataDictService;

    @Resource
    private ProjectService projectService;

    /**
     * 转租信息登记
     */
    @RequestMapping("zuHouse")
    public void zuHouse(){}

    /**
     * ztree获取
     */
    @RequestMapping("dataJson")
    @ResponseBody
    public List dataJson(HttpServletRequest request) {

        List<Project> projectList = projectService.listAll();//项目
        //按照组别封装数据为json格式
        List<Map> jsonList = new ArrayList<Map>();

        for (int i = 0; i < projectList.size(); i++) {
            Map<String, Object> m = new LinkedHashMap<String, Object>();
            m.put("name", projectList.get(i).getProjectName());
            List childrenList = houseService.getHouseNumInfo(projectList.get(i).getId());
            List<Map> list = new ArrayList<Map>();
            for (int j = 0; j < childrenList.size(); j++) {
                Map map = new HashMap();
                map.put("id", projectList.get(i).getId());
                map.put("name", childrenList.get(j) + "号楼");
                //Object[] objects=(Object[])childrenList.get(j);
                //map.put("name", objects[1] + "号楼");
                //map.put("houseId", objects[0]);
                map.put("icon", "/static/plugin/zTree_v3-master/css/zTreeStyle/img/diy/1_close.png");
                list.add(map);
            }
            m.put("children", list);
            m.put("open", true);
            jsonList.add(m);
        }
        return jsonList;
    }

    /**
     * 加载楼盘图
     *
     * @param request
     * @param modelMap
     */
    @RequestMapping("loadBuildPic")
    public void loadBuildPic(HttpServletRequest request, ModelMap modelMap,int id, String buildNum){
        Integer projectUuid = id;
        Project project = this.projectService.get(projectUuid);

        Map<String, String> houseTypeDataDictMap = this.dataDictService.getMapByParentAttributeNameForValue("居室");
        List<String> unitList = this.houseService.distinctUnit(project.getId(), buildNum);// 获取所有单元
        // 各个单元的最大房号<单元号，最大房号>
        Map<String, String> maxRoomByUnitMap = this.houseService.getMaxRoomByUnit(project.getId(), buildNum);
        // 最大楼层
        int maxFloor = this.houseService.getMaxFloor(project.getId(), buildNum);
        // 所有房源
        List<House> houseList = this.houseService.listHouse(project.getId(), buildNum);
        Map<String, House> houseMap = new HashMap<String, House>();// <单元-房号:house>
        if (Collections3.isNotEmpty(houseList) && houseList.size() > 0) {
            for (House house : houseList) {
                String code = house.getUnitNum() + "-" + house.getHouseNum();
                houseMap.put(code, house);
            }
        }
        //单元  房号  居室
        Map<String, Map<String, String>> houseTypeMap = this.houseService.getHouseTypeByProjectIdAndBuildNum(project.getId(), buildNum);
        List<DataDict> flagList = dataDictService.getDataDictList("分配状态");
        List<DataDict> typeList = dataDictService.getDataDictList("居室");
        Map<String, DataDict> flagMap = Maps.newLinkedHashMap();
        Map<String, String> typeMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(flagList)) {
            for (DataDict dataDict : flagList) {
                flagMap.put(dataDict.getAttributeValue(), dataDict);
            }
        }
        if (Collections3.isNotEmpty(typeList)) {
            for (DataDict dataDict : typeList) {
                typeMap.put(dataDict.getAttributeValue(), dataDict.getAttributeColor());
            }
        }
        modelMap.addAttribute("project", project);
        modelMap.addAttribute("buildNum", buildNum);
        modelMap.addAttribute("unitList", unitList);
        modelMap.addAttribute("maxRoomByUnitMap", maxRoomByUnitMap);
        modelMap.addAttribute("maxFloor", maxFloor);
        modelMap.addAttribute("houseMap", houseMap);
        modelMap.addAttribute("houseTypeMap", houseTypeMap);
        modelMap.addAttribute("houseTypeDataDictMap", houseTypeDataDictMap);
        modelMap.addAttribute("flagMap", flagMap);
        modelMap.addAttribute("typeMap", typeMap);
    }

    //信息回显
    @RequestMapping("houseMsg")
    public void houseMsg(HttpServletRequest request, ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        modelMap.addAttribute("house", house);

        Integer projectId = ParamUtils.getInt(request, "projectId", 0);
        Project project = this.projectService.get(projectId);
        modelMap.addAttribute("project", project);
    }

    /**
     * 转租保存
     * @param request
     * @return
     */
    @RequestMapping("houseSave")
    public String houseSave(HttpServletRequest request){
        //房源获取
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);

        Servlets.bind(request,house);
        this.houseService.save(house);

        return "redirect:turnzuList";
    }

    /**
     * 房屋转租列表
     * @param request
     * @return
     */
    @RequestMapping("turnzuList")
    public void turnzuList(HttpServletRequest request, ModelMap modelMap){
        PageInfo<House> pageInfo = new PageInfo<>();
        Servlets.initPageInfo(request,pageInfo);
        pageInfo=this.houseService.getZuHouseList(pageInfo);

        modelMap.put("pageInfo",pageInfo);
    }

    /**
     * 转租信息查看
     * @param request
     * @return
     */
    @RequestMapping("turnzuView")
    public void turnzuView(HttpServletRequest request,ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        modelMap.addAttribute("house",house);
    }

    /**
     * 转租信息修改
     * @param request
     * @return
     */
    @RequestMapping("turnzuForm")
    public void turnzuForm(HttpServletRequest request,ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        modelMap.addAttribute("house",house);
    }

    /**
     * 修改保存
     * @param request
     * @return
     */
    @RequestMapping("turnzuSave")
    public String turnzuSave(HttpServletRequest request,ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        if(house == null){
            house = new House();
        }
        Servlets.bind(request,house);
        this.houseService.save(house);
        return "redirect:turnzuList?" + request.getAttribute("searchParams");
    }

    /**
     * 转售信息登记
     */
    @RequestMapping("saleHouse")
    public void saleHouse(){}

    /**
     * 加载楼盘图
     *
     * @param request
     * @param modelMap
     */
    @RequestMapping("loadBuildPics")
    public void loadBuildPics(HttpServletRequest request, ModelMap modelMap,int id, String buildNum){
        loadBuildPic(request,modelMap,id,buildNum);
    }

    //转售信息回显
    @RequestMapping("houseMsgs")
    public void houseMsgs(HttpServletRequest request, ModelMap modelMap){
        houseMsg(request,modelMap);
    }

    /**
     * 房屋转售列表
     * @param request
     * @return
     */
    @RequestMapping("saleList")
    public void saleList(HttpServletRequest request, ModelMap modelMap){
        PageInfo<House> pageInfo = new PageInfo<>();
        Servlets.initPageInfo(request,pageInfo);
        pageInfo=this.houseService.getSaleHouseList(pageInfo);

        modelMap.put("pageInfo",pageInfo);
    }

    /**
     * 转售信息查看
     * @param request
     * @return
     */
    @RequestMapping("turnSaleView")
    public void turnSaleView(HttpServletRequest request,ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        modelMap.addAttribute("house",house);
    }

    /**
     * 转售信息登记
     * @param request
     * @return
     */
    @RequestMapping("turnSaleForm")
    public void turnSaleForm(HttpServletRequest request,ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        modelMap.addAttribute("house",house);
    }

    /**
     * 转售信息保存
     * @param request
     * @return
     */
    @RequestMapping("turnSaleSave")
    public String turnSaleSave(HttpServletRequest request,ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        if(house == null){
            house = new House();
        }
        Servlets.bind(request,house);
        this.houseService.save(house);
        return "redirect:saleList?";
    }

}
