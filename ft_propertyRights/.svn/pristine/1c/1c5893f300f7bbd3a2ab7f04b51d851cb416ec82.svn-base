package com.app.cq.web.cq;

import com.app.common.model.DataDict;
import com.app.common.service.DataDictService;
import com.app.cq.exception.Precondition;
import com.app.cq.exception.Response;
import com.app.cq.model.Contract;
import com.app.cq.model.Family;
import com.app.cq.model.House;
import com.app.cq.model.Project;
import com.app.cq.service.ContractService;
import com.app.cq.service.FamilyService;
import com.app.cq.service.HouseService;
import com.app.cq.service.ProjectService;
import com.app.permission.utils.UserSession;
import com.google.common.collect.Maps;
import com.sqds.exception.SqdsException;
import com.sqds.page.PageInfo;
import com.sqds.utils.Collections3;
import com.sqds.utils.StringUtils;
import com.sqds.web.ParamUtils;
import com.sqds.web.Servlets;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.*;

/**
 * Created by jmdf on 2018/8/9.
 */
@Controller
@RequestMapping("/cq/contract/*")
public class ContractController {
    @Resource
    private FamilyService familyService;
    @Resource
    private ContractService contractService;
    @Resource
    private HouseService houseService;
    @Resource
    private ProjectService projectService;
    @Resource
    private DataDictService dataDictService;

    /**
     * 合同信息登记入口
     */
    @RequestMapping("start")
    public void start(){

    }

    /**
     * 合同信息列表
     * @param request
     * @param modelMap
     */
    @RequestMapping("list")
    public void list(HttpServletRequest request, ModelMap modelMap){
        PageInfo<Contract> pageInfo = new PageInfo<>();
        Servlets.initPageInfo(request,pageInfo);
        pageInfo = this.contractService.contractList(pageInfo);
        modelMap.put("pageInfo",pageInfo);
    }

    /**
     * 合同信息登记
     */
    @RequestMapping("form")
    public void form(HttpServletRequest request, ModelMap modelMap) {
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Integer familyId = ParamUtils.getInt(request, "familyId", 0);

        Family  family = this.familyService.get(familyId);
        Precondition.checkSqdsArguement(family != null, "数据错误，请重试！");
        Contract  contract = this.contractService.get(contractId);

        String projectName=family.getProjectName();
        //查项目下楼号集合
        Project project = this.projectService.getProject(projectName);
        List<Integer> buildNums = this.houseService.buildingNumList(project.getId());
        modelMap.addAttribute("buildNums", buildNums);

        if (contract == null) {
            contract = new Contract();
        }

        modelMap.addAttribute("contract", contract);
        modelMap.addAttribute("family", family);
        modelMap.addAttribute("person", UserSession.getUserFromSession(request).getRealName());
    }

    /**
     * 合同查看
     * @param request
     * @return
     */
    @RequestMapping("view")
    public void view(HttpServletRequest request,ModelMap modelMap){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);

        modelMap.addAttribute("contract",contract);
    }

    /**
     * 合同信息保存
     * @param request
     * @return
     */
    @RequestMapping("save")
    public String save(HttpServletRequest request){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract  contract = this.contractService.get(contractId);

        Integer familyId = ParamUtils.getInt(request, "familyId", 0);
        Family family = this.familyService.get(familyId);

        Integer houseId = ParamUtils.getInt(request, "houseId", 0);

        if (contract == null) {
            contract = new Contract();
        }
        contract.setFamily(family);
        Servlets.bind(request,contract);
        this.contractService.save(contract);

        return "redirect:list?" +"&"+request.getAttribute("searchParams");
    }

    /**
     * 查找家庭信息
     * @param request
     * @param response
     */
    @RequestMapping("ajaxFamilyInfo")
    @ResponseBody
    public void ajaxFamilyInfo(HttpServletRequest request,HttpServletResponse response) {
        String query = ParamUtils.getString(request,"query","");
        List<Family> list = this.familyService.listByParam(query);
        if (list == null || list.size() == 0) {
            return;
        }
        StringBuffer jsonstr = new StringBuffer();
        // json数据格式
        /**
         * { query:'Li', // Original request suggestions:['Liberia','Libyan Arab
         * Jamahiriya','Liechtenstein','Lithuania'], // List of suggestions
         * data:['LR','LY','LI','LT'] // Optional parameter: list of keys for
         * suggestion options; used in callback functions. }
         */
        jsonstr.append("{query:'" + query + "',suggestions:[");
        int index = list.size();
        int i = 0;
        for (Family family : list) {
            String str = StringUtils.getNotNullString(family.getName()) + "   "
                    + StringUtils.getNotNullString(family.getIdCard())+ "    "
                    +StringUtils.getNotNullString(family.getFamilyCode());
            jsonstr.append("'" + str + "'");
            if ((i + 1) != index) {
                jsonstr.append(",");
            }
            i += 1;
        }
        jsonstr.append("],data:[");
        i = 0;// 初始化i
        for (Family family : list) {
            String str = StringUtils.getNotNullString(family.getFamilyCode());
            jsonstr.append("'" + str + "'");
            if ((i + 1) != index) {
                jsonstr.append(",");
            }
            i += 1;
        }
        jsonstr.append("]}");
        PrintWriter out = null;
        try {
            out = response.getWriter();
            response.setContentType("application/json; charset=utf-8");
            // 防止JSP页面缓存造成ajax数据不刷新
            response.setHeader("Cache-Control", "no-store");
            response.setHeader("Pragma", "no-cache");
            response.setDateHeader("Expires", 0);

            out.print(jsonstr.toString());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }


    /**
     * 验证家庭信息是否存在
     *
     * @param request
     */
    @RequestMapping("validateIsExists")
    @ResponseBody
    public Map validateIsExists(HttpServletRequest request) {

        String familyCode = ParamUtils.getString(request, "familyCode", "");

        Family family = null;
        int status = 1;
        String message = "";

        try {
            family = this.familyService.findOneByProperty("familyCode",familyCode);
        } catch (Exception e) {
            status = 3;
            message = "输入数据有误";
        }

        int familyId = 0;
        if (family == null) {
            status = 2;
            message = "找不到该户数据，请检查输入内容是否正确";
        }

        if (status == 1) {
            familyId = family.getId();
        }

        Map map = new HashMap();
        map.put("status", status);
        map.put("message", message);
        map.put("familyId", familyId);
        return map;
    }

    /**
     * 删除
     * @param request
     * @return
     */
    @RequestMapping("delete")
    @ResponseBody
    public Map<String,String> delete(ServletRequest request){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract  contract = this.contractService.get(contractId);

        Precondition.checkSqdsArguement(contract != null, "数据错误，请重试！");
        this.contractService.delete(contract.getId());
        Map<String,String> map = new HashMap<String, String>();
        map.put("success","true");
        return map;
    }

    /**
     * 合同信息登记
     * @param request
     * @return
     */
    @RequestMapping("contractRegisit")
    public void contractRegisit(HttpServletRequest request){

    }

    /**
     * 合同登记ztree获取
     *
     * @param request
     */
    @RequestMapping("dataJson")
    @ResponseBody
    public List dataJson(HttpServletRequest request) {

        List<Project> projectList = projectService.listAll();//项目
        //按照组别封装数据为json格式
        List<Map> jsonList = new ArrayList<Map>();

        for (int i = 0; i < projectList.size(); i++) {
            Map<String, Object> m = new LinkedHashMap<String, Object>();
            m.put("name", projectList.get(i).getProjectName());
            List childrenList = houseService.getHouseNumInfo(projectList.get(i).getId());
            List<Map> list = new ArrayList<Map>();
            for (int j = 0; j < childrenList.size(); j++) {
                Map map = new HashMap();
                map.put("id", projectList.get(i).getId());
                map.put("name", childrenList.get(j) + "号楼");
                //Object[] objects=(Object[])childrenList.get(j);
                //map.put("name", objects[1] + "号楼");
                //map.put("houseId", objects[0]);
                map.put("icon", "/static/plugin/zTree_v3-master/css/zTreeStyle/img/diy/1_close.png");
                list.add(map);
            }
            m.put("children", list);
            m.put("open", true);
            jsonList.add(m);
        }
        return jsonList;
    }

    /**
     * 加载楼盘图
     *
     * @param request
     * @param modelMap
     */
    @RequestMapping("loadBuildPic")
    public void loadBuildPic(HttpServletRequest request, ModelMap modelMap,int id, String buildNum){
        Integer projectUuid = id;
        Project project = this.projectService.get(projectUuid);

        Map<String, String> houseTypeDataDictMap = this.dataDictService.getMapByParentAttributeNameForValue("居室");
        List<String> unitList = this.houseService.distinctUnit(project.getId(), buildNum);// 获取所有单元
        // 各个单元的最大房号<单元号，最大房号>
        Map<String, String> maxRoomByUnitMap = this.houseService.getMaxRoomByUnit(project.getId(), buildNum);
        // 最大楼层
        int maxFloor = this.houseService.getMaxFloor(project.getId(), buildNum);
        // 所有房源
        List<House> houseList = this.houseService.listHouse(project.getId(), buildNum);
        Map<String, House> houseMap = new HashMap<String, House>();// <单元-房号:house>
        if (Collections3.isNotEmpty(houseList) && houseList.size() > 0) {
            for (House house : houseList) {
                String code = house.getUnitNum() + "-" + house.getHouseNum();
                houseMap.put(code, house);
            }
        }
        //单元  房号  居室
        Map<String, Map<String, String>> houseTypeMap = this.houseService.getHouseTypeByProjectIdAndBuildNum(project.getId(), buildNum);
        List<DataDict> flagList = dataDictService.getDataDictList("分配状态");
        List<DataDict> typeList = dataDictService.getDataDictList("居室");
        Map<String, DataDict> flagMap = Maps.newLinkedHashMap();
        Map<String, String> typeMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(flagList)) {
            for (DataDict dataDict : flagList) {
                flagMap.put(dataDict.getAttributeValue(), dataDict);
            }
        }
        if (Collections3.isNotEmpty(typeList)) {
            for (DataDict dataDict : typeList) {
                typeMap.put(dataDict.getAttributeValue(), dataDict.getAttributeColor());
            }
        }
        modelMap.addAttribute("project", project);
        modelMap.addAttribute("buildNum", buildNum);
        modelMap.addAttribute("unitList", unitList);
        modelMap.addAttribute("maxRoomByUnitMap", maxRoomByUnitMap);
        modelMap.addAttribute("maxFloor", maxFloor);
        modelMap.addAttribute("houseMap", houseMap);
        modelMap.addAttribute("houseTypeMap", houseTypeMap);
        modelMap.addAttribute("houseTypeDataDictMap", houseTypeDataDictMap);
        modelMap.addAttribute("flagMap", flagMap);
        modelMap.addAttribute("typeMap", typeMap);
    }

    //合同登记信息回显
    @RequestMapping("contractMsg")
    public void contractMsg(HttpServletRequest request, ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        modelMap.addAttribute("house", house);

        Integer projectId = ParamUtils.getInt(request, "projectId", 0);
        Project project = this.projectService.get(projectId);
        modelMap.addAttribute("project", project);
    }

    /**
     * 合同登记数据分页
     * @param request
     * @return
     */
    /*@RequestMapping("loadHouse")
    public void loadHouse(HttpServletRequest request, ModelMap modelMap){
        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);
        modelMap.addAttribute("house", house);
        //return null;
    }*/

    /**
     * 合同登记保存
     * @param request
     * @return
     */
    @RequestMapping("contractSave")
    public String contractSave(HttpServletRequest request){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);

        Integer houseId = ParamUtils.getInt(request, "houseId", 0);
        House house = this.houseService.get(houseId);

        if (contract == null) {
            contract = new Contract();
        }
        contract.setHouse(house);
        Servlets.bind(request,contract);
        this.contractService.save(contract);

        return "redirect:list?" +"&"+request.getAttribute("searchParams");
    }

    /**
     * 合同上报跳转
     * @param request
     * @return
     */
    @RequestMapping("contractReport")
    public void contractReport(HttpServletRequest request,ModelMap modelMap){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);
        modelMap.addAttribute("contract",contract);
    }

    /**
     * 合同上报
     * @param request
     * @return
     */
    @RequestMapping("reportData")
    @ResponseBody
    public Response reportData(HttpServletRequest request){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);
        contract.setStatus(2);
        this.contractService.save(contract);

        Response response = new Response();
        response.setCode("1111");

        return response;
    }

    /**
     * 合同信息备案列表
     * @param request
     * @return
     */
    @RequestMapping("checkList")
    public void checkList(HttpServletRequest request,ModelMap modelMap){
        list(request,modelMap);
    }

    /**
     * 备案管理
     * @param request
     * @return
     */
    @RequestMapping("checkForm")
    public void checkForm(HttpServletRequest request,ModelMap modelMap){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);
        modelMap.addAttribute("contract",contract);
    }

    /**
     * 备案查看
     * @param request
     * @return
     */
    @RequestMapping("mainView")
    public void mainView(HttpServletRequest request,ModelMap modelMap){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);

        Family family = contract.getFamily();

        modelMap.addAttribute("contract",contract);
        modelMap.addAttribute("family",family);
    }

    /**
     * 合同数据锁定
     * @param request
     * @return
     */
    @RequestMapping("dataHandUp")
    @ResponseBody
    public Response dataHandUp(HttpServletRequest request, ModelMap modelMap){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);
        Precondition.checkSqdsArguement(contract != null, "数据错误，请重试！");

        contract.setStatus(3);
        this.contractService.save(contract);

        Response response = new Response();
        response.setCode("1111");

        return response;
    }

    /**
     * 合同数据退回
     * @param request
     * @return
     */
    @RequestMapping("backData")
    @ResponseBody
    public Response backData(HttpServletRequest request,ModelMap modelMap,String reason){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);
        Precondition.checkSqdsArguement(contract != null, "数据错误，请重试！");

        contract.setStatus(4);
        contract.setReason(reason);
        this.contractService.save(contract);

        Response response = new Response();
        response.setCode("1111");

        return response;
    }

    /**
     * 合同信息管理
     * @param request
     * @return
     */
    @RequestMapping("contractManager")
    public void contractManager(HttpServletRequest request,ModelMap modelMap){
        list(request,modelMap);
    }

    /**
     * 转租/售信息登记
     * @param request
     * @return
     */
    @RequestMapping("zzsRegist")
    public void zzsRegist(HttpServletRequest request,ModelMap modelMap){
        Integer contractId = ParamUtils.getInt(request, "contractId", 0);
        Contract contract = this.contractService.get(contractId);
        modelMap.addAttribute("contract",contract);
    }

}
