package com.app.cq.service;

import com.app.cq.model.Contract;
import com.app.cq.model.Family;
import com.app.common.model.DataDict;
import com.app.common.service.DataDictService;
import com.google.common.collect.Maps;
import com.sqds.hibernate.HibernateDao;
import com.sqds.page.PageInfo;
import com.sqds.utils.Collections3;
import com.sqds.web.ParamUtils;
import org.apache.logging.log4j.util.Strings;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import javax.servlet.http.HttpServletRequest;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

@Service
public class StatisticsService extends HibernateDao {

    @Autowired
    private ProjectService projectService;
    @Autowired
    private DataDictService dataDictService;

    /**
     * 获取项目名称，每个项目的家庭数量
     *
     * @return
     */
    public Map<String, String> getFamilyCount() {
        String sql = "select projectName,count(id) as familyCount from family group by projectName order by projectName ";
        List<Object[]> mapList = (List<Object[]>) this.getSession().createSQLQuery(sql).list();
        Map<String, String> resultMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(mapList)) {
            for (int i = 0; i <mapList.size() ; i++) {
                String projectName = mapList.get(i)[0].toString();
                String familyCount = mapList.get(i)[1].toString();
                resultMap.put(projectName,familyCount);
            }
        }
        return resultMap;
    }
    /**
     * 获取项目名称，每个项目的合同数量
     *
     * @return
     */
    public Map<String, String> getContractCount() {
        String sql = "select projectId,count(id) as projectCount from contract group by projectId order by projectId ";
        List<Object[]> mapList = (List<Object[]>) this.getSession().createSQLQuery(sql).list();
        Map<String, String> resultMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(mapList)) {
            for (int i = 0; i <mapList.size() ; i++) {
                Integer projectId = (Integer) mapList.get(i)[0];
                String projectName = projectService.get(projectId).getProjectName();
                String familyCount = mapList.get(i)[1].toString();
                resultMap.put(projectName,familyCount);
            }
        }
        return resultMap;
    }

    /**
     * 根据项目和居室分组获取项目名称，居室，套数
     *
     * @return
     */
    public Map<String, Map> getHouseCount() {
        String sql = "select projectId,houseType,count(id) as houseCount from house group by houseType,projectId order by houseType,projectId ";
        List<Object[]> mapList = (List<Object[]>) this.getSession().createSQLQuery(sql).list();
        Map<String, Map> resultMap = Maps.newLinkedHashMap();
        Integer holdHouseType = null;
        if (Collections3.isNotEmpty(mapList)) {
            Map<Integer, BigInteger> resultMap1 = Maps.newLinkedHashMap();
            for (int i = 0; i <mapList.size() ; i++) {
                Integer projectId = (Integer) mapList.get(i)[0];
                Integer houseType = (Integer) mapList.get(i)[1];
                BigInteger houseCount = (BigInteger) mapList.get(i)[2];
                String houseTypeName = "";
                List<DataDict> houseTypeDataDictList = dataDictService.getDataDictList("居室");
                for (DataDict dataDict:houseTypeDataDictList) {
                    if (houseType == Integer.valueOf(dataDict.getAttributeValue())){
                        houseTypeName = dataDict.getAttributeName();
                    }
                }
                if (holdHouseType != null && houseType != holdHouseType){
                    resultMap1 = Maps.newLinkedHashMap();
                }
                resultMap1.put(projectId,houseCount);
                holdHouseType = houseType;
                resultMap.put(houseTypeName,resultMap1);
            }
        }
        return resultMap;
    }


    /**
     * 获取项目名称，每个项目的影像文件数量
     *
     * @return
     */
    public Map<String, String> getVideoCount() {
        String sql = "select projectId,count(id) as fileCount from fileInfo group by projectId order by projectId ";
        List<Object[]> mapList = (List<Object[]>) this.getSession().createSQLQuery(sql).list();
        Map<String, String> resultMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(mapList)) {
            for (int i = 0; i <mapList.size() ; i++) {
                Integer projectId = (Integer) mapList.get(i)[0];
                String projectName = this.projectService.get(projectId).getProjectName();
                String fileCount = mapList.get(i)[1].toString();
                resultMap.put(projectName,fileCount);
            }
        }
        return resultMap;
    }
    /**
     * 核验情况统计
     *
     * @return
     */
    public Map<String, Map<String,List<String>>> getCheckStatistics() {
        String sql = "SELECT projectName,familyType,count(id)," +
                "sum(case when houseStatus = 1 and socialStatus = 1 and marriageStatus = 1 and ageStatus = 1 and educationStatus = 1 and otherStatus = 1 then 1 ELSE 0 end) as notCheck," +
                "sum(case when houseStatus = 2 and socialStatus = 2 and marriageStatus = 2 and ageStatus = 2 and educationStatus = 2 and otherStatus = 2 then 1 ELSE 0 end) as noCheck," +
                "sum(case when houseStatus = 3 or socialStatus = 3 or marriageStatus = 3 or ageStatus = 3 or educationStatus = 3 or otherStatus = 3 then 1 ELSE 0 end) as Checked " +
                "FROM family GROUP BY projectName,familyType ORDER BY projectName,familyType";
        List<Map> mapList =  this.getSession().createSQLQuery(sql).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        Map<String, Map<String,List<String>>> resultMap = Maps.newLinkedHashMap();
        if (Collections3.isNotEmpty(mapList)) {
            for (int i = 0; i <mapList.size() ; i++) {
                String projectName = String.valueOf(mapList.get(i).get("projectName"));
                String familyTypeId = String.valueOf(mapList.get(i).get("familyType"));
                String totalCount = String.valueOf(mapList.get(i).get("count(id)"));
                String notCheck = String.valueOf(mapList.get(i).get("notCheck"));
                String noCheck = String.valueOf(mapList.get(i).get("noCheck"));
                String checked = String.valueOf(mapList.get(i).get("Checked"));
                Map<String,List<String>> resultMap1 = resultMap.get(projectName) == null ? new LinkedHashMap<String,List<String>>() : resultMap.get(projectName);
                List<String> resultList = new ArrayList<>();
                resultList.add(totalCount);
                resultList.add(notCheck);
                resultList.add(noCheck);
                resultList.add(checked);
                resultMap1.put(familyTypeId,resultList);
                resultMap.put(projectName,resultMap1);
            }
        }
        return resultMap;
    }

    /**
     * 核验情况总计
     *
     * @return
     */
    public Map<String, String> getCheckStatisticsTotal() {
        String sql = "select count(id),sum(case when houseStatus = 1 and socialStatus = 1 and marriageStatus = 1 and ageStatus = 1 and educationStatus = 1 and otherStatus = 1 then 1 ELSE 0 end) as notCheck," +
                "sum(case when houseStatus = 2 and socialStatus = 2 and marriageStatus = 2 and ageStatus = 2 and educationStatus = 2 and otherStatus = 2 then 1 ELSE 0 end) as noCheck," +
                "sum(case when houseStatus = 3 and socialStatus = 3 and marriageStatus = 3 and ageStatus = 3 and educationStatus = 3 and otherStatus = 3 then 1 ELSE 0 end) as Checked " +
                "FROM family";
        List<Map> mapList =  this.getSession().createSQLQuery(sql).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
        Map<String,String> resultMap = Maps.newLinkedHashMap();
        for (int i = 0; i <mapList.size() ; i++) {
            String totalCount = String.valueOf(mapList.get(i).get("count(id)"));
            String notCheck = String.valueOf(mapList.get(i).get("notCheck"));
            String noCheck = String.valueOf(mapList.get(i).get("noCheck"));
            String checked = String.valueOf(mapList.get(i).get("Checked"));
            resultMap.put("totalCount",totalCount);
            resultMap.put("notCheck",notCheck);
            resultMap.put("noCheck",noCheck);
            resultMap.put("checked",checked);
        }

        return resultMap;
    }

    /**
     * 综合统计查询方法
     *
     * @param pageInfo
     */
    public PageInfo<Family> getListForCompositeSearch(PageInfo<Family> pageInfo, HttpServletRequest request) {
        StringBuffer hql = new StringBuffer("select f from Family f,House h,Contract c where 1=1 ");   //and len(f.idCode) = 10
        Enumeration<String> paramsArray = request.getParameterNames();
        while (paramsArray.hasMoreElements()) {
            String name = paramsArray.nextElement();
            if (name.endsWith("Array")) {
                String value = ParamUtils.getString(request, name, "");
                if (Strings.isNotEmpty(value)) {
                    if (name.indexOf("_string") > 0) {
                        value = this.getParamString(value);
                    }
                    String newName = name.substring(name.indexOf("_") + 1);
                    String columnName = newName.substring(0, newName.indexOf("_"));

                    hql.append(" and " + columnName + " in (" + value + ")");
                }
            }
        }
        hql.append("and f.id=c.family.id AND c.house.id=h.id order by f.projectName ");
        return this.list(pageInfo, hql.toString());
    }

    private String getParamString(String param) {
        String[] array = param.split(",");
        StringBuffer paramSb = new StringBuffer();
        for (String s : array) {
            paramSb.append("'" + s + "'").append(",");
        }
        paramSb.deleteCharAt(paramSb.lastIndexOf(","));
        return paramSb.toString();
    }

    /**
     * 综合统计查询方法
     *
     * @param pageInfo
     */
    public PageInfo<Contract> getListForSearch(PageInfo<Contract> pageInfo, HttpServletRequest request) {
        StringBuffer hql = new StringBuffer(" from Contract c inner join fetch c.family f where 1 = 1");   //and len(f.idCode) = 10
        Enumeration<String> paramsArray = request.getParameterNames();
        while (paramsArray.hasMoreElements()) {
            String name = paramsArray.nextElement();
            if (name.endsWith("Array")) {
                String value = ParamUtils.getString(request, name, "");
                if (Strings.isNotEmpty(value)) {
                    if (name.indexOf("_string") > 0) {
                        value = this.getParamString(value);
                    }
                    String newName = name.substring(name.indexOf("_") + 1);
                    String columnName = newName.substring(0, newName.indexOf("_"));

                    hql.append(" and " + columnName + " in (" + value + ")");
                }
            }
        }
        hql.append(" order by c.familyCode ");
        return this.list(pageInfo, hql.toString());
    }

}
